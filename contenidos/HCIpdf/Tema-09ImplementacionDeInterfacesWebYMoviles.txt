Implementación de interfaces web y
móviles
© Universitas Europaea IMF
Indice
Implementación de interfaces web y móviles
5
1. HTML5:
5
1.1 Estructura Semántica en HTML5
5
Ejemplo de estructura semántica en HTML5
6
1.2 Multimedia: Video y Audio sin Plugins
6
Uso de la etiqueta <video>
7
Uso de la etiqueta <audio>
7
1.3 Formularios Mejorados en HTML5
7
Nuevos tipos de input en HTML5
7
Ejemplo de formulario con validaciones en HTML5
7
1.4 APIs Modernas en HTML5
8
Principales APIs en HTML5
8
Ejemplo de API de Geolocalización
8
Conclusión
9
2. CSS3:
9
2.1 Estilos Avanzados en CSS3
9
Sombras en texto y elementos
9
Gradientes de color
9
2.2 Flexbox y Grid: Sistemas de Layout en CSS3
10
Flexbox: Diseño Flexible
10
Propiedades clave de Flexbox:
10
CSS Grid: Diseño en Dos Dimensiones
10
Ventajas de Grid sobre Flexbox:
10
2.3 Media Queries: Diseño Responsivo en CSS3
11
Beneficios de usar media queries:
11
2.4 Variables CSS: Mantenimiento y Consistencia
11
Ventajas de usar variables CSS:
11
2.5 Animaciones y Transiciones en CSS3
11
Transiciones CSS
12
Animaciones con @keyframes
12
2.6 Buenas Prácticas en CSS3
12
Conclusión
12
3. JavaScript
13
3.1 Interactividad y Manipulación del DOM
13
Seleccionar elementos del DOM
13
Modificar contenido y atributos
13
Agregar y eliminar elementos
13
3.2 Eventos en JavaScript
14
Ejemplo de manejo de eventos
14
Tipos de eventos más comunes en JavaScript:
14
3.3 AJAX y Carga Asíncrona de Datos
14
Ejemplo de petición con Fetch API
14
Ventajas de usar AJAX en aplicaciones web:
15
3.4 Frameworks y Bibliotecas de JavaScript
15
React.js
15
Vue.js
15
Angular
15
3.5 Buenas Prácticas en JavaScript
16
Documento solo para uso personal. Prohibido copiar o distribuir
2/26
Conclusión
17
4. Frameworks
17
4.1 Frameworks para Diseño Responsivo
17
Bootstrap
17
Características principales:
17
Ejemplo de uso de Bootstrap
18
Tailwind CSS
18
Características principales:
18
Ejemplo de Tailwind CSS
18
4.2 Frameworks de JavaScript para Interfaces de Usuario
18
React.js
18
Características principales:
18
Ejemplo de componente en React
19
Vue.js
19
Características principales:
19
Ejemplo de Vue.js
19
Angular
19
Características principales:
19
Ejemplo de Angular
19
4.3 Frameworks para Aplicaciones Móviles
20
React Native
20
Características principales:
20
Ejemplo de React Native
20
Ionic
20
Características principales:
20
Ejemplo de Ionic
20
4.4 Consideraciones para la Implementación de Frameworks
21
Conclusión
21
5. Consideraciones para la Implementación
21
5.1 Accesibilidad: Interfaces para Todos los Usuarios
21
Principales prácticas para mejorar la accesibilidad
22
Ejemplo de uso de ARIA en un botón accesible
22
Herramientas para verificar accesibilidad
22
5.2 Rendimiento: Optimización de Carga y Fluidez
22
Estrategias para mejorar el rendimiento
22
Ejemplo de carga diferida de imágenes
22
Herramientas para medir y mejorar el rendimiento
22
5.3 Pruebas: Compatibilidad y Usabilidad en Diferentes Entornos
23
Tipos de pruebas recomendadas
23
Ejemplo de prueba automatizada con Cypress
23
Herramientas recomendadas para pruebas
23
5.4 Seguridad: Protección de Datos y Prevención de Ataques
23
Principales amenazas de seguridad en aplicaciones web
23
Buenas prácticas de seguridad
23
Ejemplo de prevención de XSS en JavaScript
24
Herramientas para analizar la seguridad
24
5.5 Mantenimiento y Escalabilidad
24
Estrategias para garantizar escalabilidad
24
Conclusión
24
Actividades prácticas
26
Documento solo para uso personal. Prohibido copiar o distribuir
3/26
Documento solo para uso personal. Prohibido copiar o distribuir
4/26
Implementación de interfaces web y móviles
El desarrollo de interfaces web y móviles ha evolucionado significativamente en la última década, impulsado
por la necesidad de ofrecer experiencias más dinámicas, interactivas y accesibles. Para lograrlo, los
desarrolladores recurren a una combinación de tecnologías fundamentales como 
HTML5, CSS3 y
JavaScript
, junto con frameworks que optimizan el proceso de desarrollo y mejoran la eficiencia del código.
Además de estas tecnologías base, el uso de 
frameworks y bibliotecas
 ha revolucionado la forma en que se
desarrollan interfaces web. Herramientas como 
Bootstrap
 simplifican el diseño responsivo, mientras que
frameworks como 
React, Vue.js y Angular
 facilitan la creación de aplicaciones interactivas y escalables. En
el ámbito móvil, 
React Native
 e 
Ionic
 permiten desarrollar aplicaciones multiplataforma utilizando tecnologías
web, reduciendo costos y tiempos de desarrollo.
El éxito de una aplicación web o móvil no solo depende de su funcionalidad y diseño, sino también de su
rendimiento, accesibilidad, seguridad y compatibilidad
 con distintos dispositivos y navegadores. Por ello,
es fundamental seguir buenas prácticas en cada fase del desarrollo, asegurando que las interfaces sean
eficientes, accesibles y seguras para todos los usuarios.
En esta unidad, exploraremos en profundidad los principios de HTML5, CSS3 y JavaScript, así como el uso de
frameworks que optimizan la creación de interfaces interactivas. También abordaremos las mejores prácticas
para garantizar que los proyectos cumplan con estándares de calidad, accesibilidad y seguridad.
1. HTML5:
HTML5 (
HyperText Markup Language 5
) es la quinta versión del lenguaje de marcado estándar utilizado para
estructurar y desplegar contenido en la web. Introducido en 2014, HTML5 amplió significativamente las
capacidades de sus versiones anteriores al agregar nuevas etiquetas semánticas, soporte para contenido
multimedia sin necesidad de complementos, mejoras en la accesibilidad y una integración más estrecha con
CSS3 y JavaScript
.
En este apartado exploraremos los principales conceptos y características de HTML5, incluyendo su
estructura semántica, el manejo de multimedia, mejoras en formularios y el uso de APIs modernas para
mejorar la experiencia de usuario.
1.1 Estructura Semántica en HTML5
Cada una de estas tecnologías desempeña un papel crucial en la construcción de
interfaces modernas:
HTML5
 define la estructura del contenido y proporciona elementos semánticos para
mejorar la accesibilidad y la optimización en motores de búsqueda (SEO).
CSS3
 permite estilizar y organizar visualmente los elementos de la página,
incorporando diseños avanzados mediante técnicas como 
Flexbox y Grid
, además
de animaciones y transiciones que mejoran la experiencia de usuario.
JavaScript
 es el lenguaje que aporta interactividad, permitiendo manipular el DOM,
gestionar eventos y realizar actualizaciones dinámicas sin necesidad de recargar la
página.
Documento solo para uso personal. Prohibido copiar o distribuir
5/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Uno de los avances más importantes en HTML5 es la introducción de 
etiquetas semánticas
, que mejoran la
accesibilidad y facilitan la indexación en motores de búsqueda (
SEO
). Estas etiquetas permiten describir el
propósito del contenido de una manera más significativa, en contraste con las etiquetas genéricas <div> y
<span> utilizadas en versiones anteriores de HTML.
Algunas de las etiquetas semánticas más utilizadas incluyen:
<header>
: Define la cabecera de una página o sección.
<nav>
: Representa un conjunto de enlaces de navegación.
<section>
: Agrupa contenido relacionado en una página.
<article>
: Representa contenido independiente como blogs o noticias.
<aside>
: Contenido complementario, como barras laterales o anuncios.
<footer>
: Contiene información de pie de página, enlaces y créditos.
Ejemplo de estructura semántica en HTML5
html
<
header
>
   
<
h1
>
Mi Sitio Web
</
h1
>
</
header
>
<
nav
>
    
<
ul
>
        
<
li
>
<
a
 
href
=
"#"
>
Inicio
</
a
>
</
li
>
        
<
li
>
<
a
 
href
=
"#"
>
Servicios
</
a
>
</
li
>
        
<
li
>
<
a
 
href
=
"#"
>
Contacto
</
a
>
</
li
>
    
</
ul
>
</
nav
>
<
section
>
    
<
article
>
        
<
h2
>
Artículo Principal
</
h2
>
        
<
p
>
Este es un artículo de ejemplo con contenido estructurado semánticamente.
</
p
>
    
</
article
>
</
section
>
<
aside
>
    
<
h3
>
Publicidad
</
h3
>
    
<
p
>
Contenido relacionado con el artículo.
</
p
>
</
aside
>
<
footer
>
   
<
p
>
&copy;
 2024 Mi Sitio Web
</
p
>
</
footer
>
Este enfoque semántico hace que el código sea 
más accesible
, mejorando la experiencia de los usuarios
que utilizan lectores de pantalla y permitiendo que los motores de búsqueda indexen el contenido de manera
más efectiva.
1.2 Multimedia: Video y Audio sin Plugins
Documento solo para uso personal. Prohibido copiar o distribuir
6/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Antes de HTML5, la incorporación de contenido multimedia requería complementos como 
Adobe Flash
 o
QuickTime
, lo que generaba problemas de compatibilidad, seguridad y rendimiento. Con HTML5, se
introdujeron las etiquetas 
<video>
 y 
<audio>
, que permiten integrar multimedia de manera nativa en los
navegadores.
Uso de la etiqueta <video>
html
<video controls width=
"600"
>
   <
source
 src=
"video.mp4"
 
type
=
"video/mp4"
>
   <
source
 src=
"video.webm"
 
type
=
"video/webm"
>
   Tu navegador no soporta la etiqueta de video.
</video>
controls
: Agrega controles de reproducción al usuario.
Múltiples formatos
 (
.mp4
, 
.webm
): Se recomienda incluir diferentes formatos para compatibilidad con
varios navegadores.
Uso de la etiqueta <audio>
html
<audio controls>
    <
source
 src=
"audio.mp3"
 
type
=
"audio/mpeg"
>
    Tu navegador no soporta la etiqueta de audio.
</audio>
La compatibilidad con estos formatos elimina la dependencia de software externo, optimizando la carga y
seguridad de las páginas web.
1.3 Formularios Mejorados en HTML5
Los formularios en HTML5 incorporaron nuevos tipos de 
input
 y validaciones nativas para mejorar la
experiencia del usuario y reducir la dependencia de JavaScript para validaciones básicas.
Nuevos tipos de input en HTML5
<input type="email">
: Valida automáticamente direcciones de correo electrónico.
<input type="tel">
: Indica que se espera un número de teléfono.
<input type="date">
: Despliega un selector de fecha en dispositivos compatibles.
<input type="range">
: Permite seleccionar valores en un rango determinado con una barra
deslizante.
Ejemplo de formulario con validaciones en HTML5
Documento solo para uso personal. Prohibido copiar o distribuir
7/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
html
<
form
>
   
<
label
 
for
=
"email"
>
Correo Electrónico:
</
label
>
   
<
input
 
type
=
"email"
 
id
=
"email"
 
required
>
   
<
label
 
for
=
"fecha"
>
Fecha de Nacimiento:
</
label
>
    
<
input
 
type
=
"date"
 
id
=
"fecha"
 
required
>
   
<
label
 
for
=
"edad"
>
Selecciona tu edad:
</
label
>
    
<
input
 
type
=
"range"
 
id
=
"edad"
 
min
=
"18"
 
max
=
"60"
>
   
<
button
 
type
=
"submit"
>
Enviar
</
button
>
</
form
>
Las validaciones como 
required
, 
pattern
 y 
min/max
 permiten mejorar la experiencia del usuario sin
necesidad de programación adicional.
1.4 APIs Modernas en HTML5
HTML5 introdujo una serie de APIs (Interfaces de Programación de Aplicaciones) que amplían la capacidad
del navegador y permiten una mayor interacción con el hardware y el entorno del usuario.
Principales APIs en HTML5
Geolocalización (navigator.geolocation)
: Obtiene la ubicación del usuario.
Almacenamiento local (localStorage y sessionStorage)
: Guarda datos en el navegador sin
necesidad de cookies.
Canvas (<canvas>)
: Permite dibujar gráficos y animaciones en el navegador.
Drag & Drop
: Facilita la funcionalidad de arrastrar y soltar elementos dentro de la interfaz.
Ejemplo de API de Geolocalización
html
<
button
 
onclick
=
"getLocation()"
>
Obtener Ubicación
</
button
>
<
p
 
id
=
"location"
>
</
p
>
<
script
>
   
function
 
getLocation
(
) {
       
if
 (navigator.
geolocation
) {
           navigator.
geolocation
.
getCurrentPosition
(showPosition);
       } 
else
 {
            
document
.
getElementById
(
"location"
).
innerHTML
 = 
"Geolocalización no soportada."
;
       }
   }
   
function
 
showPosition
(
position
) {
       
document
.
getElementById
(
"location"
).
innerHTML
 =
            
"Latitud: "
 + position.
coords
.
latitude
 + 
            
", Longitud: "
 + position.
coords
.
longitude
;
    }
</
script
>
Estas APIs permiten desarrollar aplicaciones web más interactivas y avanzadas sin necesidad de plugins
adicionales.
Documento solo para uso personal. Prohibido copiar o distribuir
8/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Conclusión
HTML5 ha revolucionado el desarrollo web al proporcionar herramientas avanzadas para la estructuración de
contenido, la integración de multimedia, la validación de formularios y la interacción con APIs modernas.
Gracias a su enfoque semántico y su capacidad para mejorar la accesibilidad y la optimización para motores
de búsqueda, HTML5 se ha convertido en el estándar esencial para cualquier desarrollador web.
En combinación con CSS3 y JavaScript, HTML5 permite crear interfaces dinámicas, accesibles y altamente
funcionales, adaptadas a las necesidades del usuario y compatibles con todos los dispositivos modernos.
2. CSS3:
CSS3 (
Cascading Style Sheets, Level 3
) es la última evolución del lenguaje de estilos utilizado para definir la
apariencia de los documentos HTML. Introducido como una mejora sobre CSS2, CSS3 permite una mayor
flexibilidad en el diseño web, brindando características avanzadas como animaciones, transiciones, sombras,
gradientes, tipografías personalizadas y herramientas para 
diseño responsivo
 como 
Flexbox y Grid
.
A lo largo de este apartado, exploraremos los conceptos fundamentales de CSS3 y su aplicación en el
desarrollo de interfaces modernas.
2.1 Estilos Avanzados en CSS3
CSS3 introduce nuevas propiedades para mejorar la apariencia visual de los elementos sin necesidad de usar
imágenes o scripts adicionales.
Sombras en texto y elementos
CSS3 permite agregar sombras tanto a los textos como a los elementos de la página, lo que mejora la
profundidad visual y el diseño.
Sombras en texto (
text-shadow
)
:
css
h1
 {
    
text-shadow
: 
2px
 
2px
 
4px
 
rgba
(
0
, 
0
, 
0
, 
0.5
);
}
Sombras en elementos (
box-shadow
):
css
.card {
    
box-shadow
: 
4px
 
4px
 
10px
 
rgba
(
0
, 
0
, 
0
, 
0.3
);
}
Gradientes de color
CSS3 permite la creación de gradientes sin necesidad de imágenes:
Gradiente lineal
:
Documento solo para uso personal. Prohibido copiar o distribuir
9/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
css
background
: 
linear-gradient
(to right, 
#ff7e5f
, 
#feb47b
);
Gradiente radial
:
css
background
: 
radial-gradient
(circle, 
#ff7e5f
, 
#feb47b
);
Estas mejoras permiten diseños más dinámicos sin sobrecargar la página con imágenes adicionales.
2.2 Flexbox y Grid: Sistemas de Layout en CSS3
Uno de los avances más importantes en CSS3 es la introducción de 
Flexbox
 y 
CSS Grid
, que facilitan la
creación de diseños responsivos y adaptativos sin necesidad de usar flotantes o posiciones absolutas.
Flexbox: Diseño Flexible
Flexbox es un modelo de disposición que facilita la alineación y distribución de elementos dentro de un
contenedor.
Ejemplo de una 
fila con tres columnas centradas
:
css
.container
 {
   
display
: flex;
   
justify-content
: center;
   
align-items
: center;
}
Propiedades clave de Flexbox:
justify-content
: Controla la alineación horizontal (flex-start, center, space-between).
align-items
: Controla la alineación vertical (stretch, center, flex-end).
flex-wrap
: Permite que los elementos se envuelvan en múltiples líneas si el espacio es insuficiente.
CSS Grid: Diseño en Dos Dimensiones
CSS Grid permite organizar los elementos en filas y columnas de manera más estructurada.
Ejemplo de 
diseño de cuadrícula con dos columnas
:
css
.grid-container
 {
   
display
: grid;
   
grid-template-columns
: 
1
fr 
2
fr;
    
gap
: 
20px
;
}
Ventajas de Grid sobre Flexbox:
Ideal para 
diseños de página completos
.
Permite una distribución precisa del contenido en 
filas y columnas
.
Documento solo para uso personal. Prohibido copiar o distribuir
10/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Se puede combinar con media queries para 
diseño responsivo
.
2.3 Media Queries: Diseño Responsivo en CSS3
CSS3 facilita la adaptación del diseño a distintos dispositivos mediante 
media queries
, que permiten aplicar
estilos específicos según el tamaño de pantalla.
Ejemplo de una media query para pantallas menores a 768px:
css
@media
 (
max-width
: 
768px
) {
   
body
 {
        
background-color
: lightgray;
    }
}
Beneficios de usar media queries:
Permite crear 
layouts adaptativos
 sin necesidad de cambiar el HTML.
Mejora la experiencia del usuario en 
dispositivos móviles y tablets
.
Optimiza la navegación sin necesidad de hacer zoom o desplazamientos horizontales.
2.4 Variables CSS: Mantenimiento y Consistencia
Las 
variables en CSS3
 permiten almacenar valores reutilizables, lo que facilita el mantenimiento del código y
la consistencia del diseño.
Ejemplo de variables CSS:
css
:root
 {
    
--primary-color
: 
#ff7e5f
;
   
--secondary-color
: 
#feb47b
;
   
--font-size
: 
16px
;
}
h1
 {
   
color
: 
var
(--primary-color);
   
font-size
: 
var
(--font-size);
}
Ventajas de usar variables CSS:
Facilitan la 
modificación global de estilos
 sin cambiar múltiples líneas de código.
Mejoran la 
consistencia del diseño
.
Reducen la repetición de código y facilitan el mantenimiento en proyectos grandes.
2.5 Animaciones y Transiciones en CSS3
CSS3 permite crear 
animaciones
 y 
transiciones suaves
 sin necesidad de JavaScript.
Documento solo para uso personal. Prohibido copiar o distribuir
11/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Transiciones CSS
Las transiciones permiten animar cambios en propiedades de CSS cuando ocurre una interacción del usuario.
Ejemplo de transición en el color de fondo:
css
button
 {
   
background-color
: 
#ff7e5f
;
   
transition
: background-color 
0.3s
 ease-in-out;
}
button
:hover
 {
   
background-color
: 
#feb47b
;
}
Animaciones con @keyframes
Las animaciones permiten definir múltiples estados y transiciones dentro de un ciclo de tiempo.
Ejemplo de animación para mover un elemento:
css
@keyframes
 mover {
   
from
 { 
transform
: 
translateX
(
0
); }
   
to
 { 
transform
: 
translateX
(
100px
); }
}
.box
 {
   
animation
: mover 
2s
 infinite alternate;
}
Las animaciones en CSS3 mejoran la interactividad de la interfaz sin afectar el rendimiento.
2.6 Buenas Prácticas en CSS3
Para garantizar un código CSS limpio y eficiente, es importante seguir buenas prácticas:
1
. 
Utilizar un enfoque modular
: Organizar los estilos en archivos separados (
main.css
, 
responsive.css
).
2
. 
Evitar el uso excesivo de ID
: Prefiere clases (
.boton-rojo
) en lugar de IDs (
#boton-rojo
) para mayor
flexibilidad.
3
. 
Minificar y comprimir CSS
: Herramientas como 
CSSNano
 y 
PostCSS
 reducen el tamaño de los
archivos CSS, mejorando la velocidad de carga.
4
. 
Evitar estilos en línea (
style=""
)
: Mantener el CSS en archivos externos mejora la mantenibilidad del
código.
5
. 
Usar preprocesadores CSS como SASS o LESS
: Facilitan la escritura de CSS con características
avanzadas como 
anidamiento, mixins y herencia
.
Conclusión
Documento solo para uso personal. Prohibido copiar o distribuir
12/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
CSS3 ha revolucionado el diseño web al proporcionar herramientas avanzadas para crear interfaces
modernas, dinámicas y accesibles. Con características como 
Flexbox, Grid, media queries, variables CSS,
animaciones y transiciones
, los desarrolladores pueden diseñar experiencias de usuario atractivas sin
depender de imágenes pesadas o scripts complejos.
Además, las buenas prácticas en CSS3 garantizan que el código sea 
escalable, eficiente y fácil de
mantener
, lo que es fundamental en proyectos web de cualquier tamaño.
3. JavaScript
JavaScript es un lenguaje de programación que permite agregar interactividad y dinamismo a las páginas
web. Junto con 
HTML5 y CSS3
, forma la base del desarrollo web moderno, permitiendo manipular el 
DOM
(Document Object Model)
, gestionar eventos, realizar peticiones asíncronas con 
AJAX
 y trabajar con
frameworks y bibliotecas que optimizan el desarrollo de interfaces de usuario.
A lo largo de este apartado, exploraremos los fundamentos de JavaScript, su aplicación en la manipulación
del DOM, el uso de AJAX para la carga dinámica de datos y la importancia de los frameworks y bibliotecas
más populares.
3.1 Interactividad y Manipulación del DOM
Uno de los principales usos de JavaScript es la 
manipulación del DOM
, que permite modificar
dinámicamente el contenido, estructura y estilo de una página web sin necesidad de recargarla.
Seleccionar elementos del DOM
JavaScript proporciona varios métodos para seleccionar elementos del documento:
javascript
// Selección por ID
let
 titulo = 
document
.
getElementById
(
"titulo"
);
// Selección por clase
let
 botones = 
document
.
getElementsByClassName
(
"boton"
);
// Selección por etiqueta
let
 parrafos = 
document
.
getElementsByTagName
(
"p"
);
// Selección moderna con querySelector
let
 elemento = 
document
.
querySelector
(
".clase"
);
let
 elementos = 
document
.
querySelectorAll
(
"p"
);
Modificar contenido y atributos
javascript
// Cambiar el contenido de un elemento
titulo.
textContent
 = 
"Nuevo Título"
;
// Modificar el valor de un atributo
document
.
getElementById
(
"imagen"
).
src
 = 
"nueva-imagen.jpg"
;
Agregar y eliminar elementos
Documento solo para uso personal. Prohibido copiar o distribuir
13/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
javascript
// Crear un nuevo elemento
let
 nuevoParrafo = 
document
.
createElement
(
"p"
);
nuevoParrafo.
textContent
 = 
"Este es un nuevo párrafo"
;
document
.
body
.
appendChild
(nuevoParrafo);
// Eliminar un elemento
document
.
body
.
removeChild
(nuevoParrafo);
El uso de JavaScript para manipular el DOM permite que las páginas web respondan a las acciones del
usuario de manera dinámica.
3.2 Eventos en JavaScript
Los eventos permiten ejecutar código en respuesta a acciones del usuario, como hacer clic en un botón,
mover el ratón o enviar un formulario.
Ejemplo de manejo de eventos
javascript
// Capturar un evento de clic
document
.
getElementById
(
"boton"
).
addEventListener
(
"click"
, 
function
(
) {
    
alert
(
"Botón clickeado!"
);
});
Tipos de eventos más comunes en JavaScript:
click → Cuando el usuario hace clic en un elemento.
mouseover → Cuando el cursor pasa sobre un elemento.
keydown → Cuando el usuario presiona una tecla.
submit → Cuando se envía un formulario.
El uso de eventos en JavaScript permite mejorar la experiencia de usuario y añadir funcionalidad interactiva a
las páginas web.
3.3 AJAX y Carga Asíncrona de Datos
AJAX (
Asynchronous JavaScript and XML
) permite realizar peticiones al servidor sin necesidad de recargar la
página. Esto es fundamental para aplicaciones web modernas, donde los datos se actualizan en tiempo real.
Ejemplo de petición con Fetch API
javascript
fetch
(
"https://jsonplaceholder.typicode.com/posts/1"
)
    .
then
(
response
 =>
 response.
json
())
   .
then
(
data
 =>
 
console
.
log
(data))
   .
catch
(
error
 =>
 
console
.
error
(
"Error:"
, error));
La 
Fetch API
 es una forma moderna de realizar peticiones HTTP, reemplazando el antiguo objeto
XMLHttpRequest.
Documento solo para uso personal. Prohibido copiar o distribuir
14/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Ventajas de usar AJAX en aplicaciones web:
Permite actualizar contenido dinámicamente sin recargar la página.
Reduce el uso de ancho de banda, mejorando el rendimiento.
Facilita la integración con APIs y bases de datos externas.
3.4 Frameworks y Bibliotecas de JavaScript
El ecosistema de JavaScript ha evolucionado con la aparición de frameworks y bibliotecas que facilitan el
desarrollo de aplicaciones web interactivas y escalables.
React.js
Desarrollado por 
Facebook
, permite construir interfaces de usuario basadas en 
componentes
reutilizables
.
Usa un 
DOM virtual
 para mejorar el rendimiento de la renderización.
Sintaxis basada en 
JSX
, que combina JavaScript y HTML.
Ejemplo de un componente en React:
javascript
function
 
Saludo
(
) {
    
return
 
<
h1
>
Hola, Mundo!
</
h1
>
;
}
Vue.js
Conocido por su 
curva de aprendizaje sencilla
 y su capacidad de integración en proyectos
existentes.
Permite la creación de componentes de interfaz de manera progresiva.
Usa una 
sintaxis clara y simple
.
Ejemplo de Vue.js:
javascript
var
 app = 
new
 Vue({
    el: 
"#app"
,
    data: {
        mensaje: 
"Hola, Vue!"
    }
});
Angular
Framework completo desarrollado por 
Google
, ideal para aplicaciones de gran escala.
Utiliza 
TypeScript
, una versión mejorada de JavaScript con tipado estático.
Documento solo para uso personal. Prohibido copiar o distribuir
15/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Soporta arquitecturas complejas con 
inyección de dependencias
.
const
: Para valores que no cambiarán.
let
: Para variables cuyo valor puede cambiar.
Guardar referencias a los elementos en variables en lugar de buscarlos repetidamente.
Divide el código en funciones pequeñas y específicas para mejorar la legibilidad.
Evita el uso de 
callbacks
 anidados y mejora la legibilidad.
Documentar el código facilita su mantenimiento.
Ejemplo de Angular:
typescript
@Component({
  selector: 
"app-hola"
,
  template: `<h1>{{ mensaje }}</h1>`
})
export 
class
 
HolaComponent
 {
  mensaje = 
"Hola, Angular!"
;
}
Los frameworks y bibliotecas han simplificado enormemente el desarrollo web, permitiendo una mejor
estructuración del código y una mayor eficiencia en la creación de aplicaciones interactivas.
3.5 Buenas Prácticas en JavaScript
Para escribir código limpio, eficiente y mantenible en JavaScript, se recomienda seguir estas buenas
prácticas:
1
. 
Usar const y let en lugar de var
:
javascript
const
 PI = 
3.1416
;
let
 contador = 
0
;
2
. 
Evitar el uso excesivo del DOM
:
javascript
let
 boton = 
document
.
getElementById
(
"boton"
);
boton.
addEventListener
(
"click"
, 
function
(
) {
   
console
.
log
(
"Clic en botón"
);
});
3
. 
Organizar el código en funciones reutilizables
:
javascript
function sumar(
a
, 
b
) {
   return 
a
 + 
b
;
}
4
. 
Utilizar promesas y async/await para código asíncrono
:
Documento solo para uso personal. Prohibido copiar o distribuir
16/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
javascript
async
 
function
 
obtenerDatos
(
) {
    
let
 response = 
await
 
fetch
(
"https://api.example.com/data"
);
    
let
 data = 
await
 response.
json
();
    
console
.
log
(data);
}
5
. 
Escribir comentarios claros y significativos
:
javascript
// Esta función suma dos números
function suma(
a
, 
b
) {
   return 
a
 + 
b
;
}
Conclusión
JavaScript es un lenguaje esencial en el desarrollo web moderno, proporcionando herramientas poderosas
para crear 
interfaces interactivas, manejar eventos, cargar datos de forma asíncrona y construir
aplicaciones complejas
 con frameworks como 
React, Vue.js y Angular
.
Su correcta implementación y uso de buenas prácticas permite desarrollar aplicaciones escalables, eficientes
y mantenibles, garantizando una mejor experiencia de usuario y rendimiento en la web.
4. Frameworks
Los frameworks de desarrollo han revolucionado la forma en que se crean interfaces web y móviles,
proporcionando herramientas, estructuras y componentes reutilizables que optimizan el proceso de desarrollo.
Su objetivo principal es 
simplificar la programación
, mejorar la organización del código y reducir el tiempo
de desarrollo al ofrecer soluciones listas para usar.
En este apartado, exploraremos los frameworks más utilizados para el diseño responsivo, el desarrollo de
interfaces de usuario con JavaScript y la creación de aplicaciones móviles multiplataforma.
4.1 Frameworks para Diseño Responsivo
El diseño responsivo es un estándar en el desarrollo web moderno, y los frameworks CSS han facilitado su
implementación mediante sistemas de rejillas, componentes predefinidos y estilos consistentes.
Bootstrap
Bootstrap es el framework CSS más popular para el diseño responsivo. Desarrollado por 
Twitter
, ofrece una
colección de clases y componentes reutilizables que permiten crear interfaces atractivas sin necesidad de
escribir código CSS personalizado.
Características principales:
Sistema de rejilla flexible (
grid system
)
 basado en 
Flexbox
.
Componentes pre-diseñados
 como botones, tarjetas, modales y formularios.
Compatibilidad con JavaScript
 mediante plugins integrados.
Documento solo para uso personal. Prohibido copiar o distribuir
17/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Compatibilidad con todos los navegadores modernos
.
Ejemplo de uso de Bootstrap
html
<
div
 
class
=
"container"
>
   
<
div
 
class
=
"row"
>
       
<
div
 
class
=
"col-md-6"
>
            
<
h2
>
Columna 1
</
h2
>
        
</
div
>
       
<
div
 
class
=
"col-md-6"
>
            
<
h2
>
Columna 2
</
h2
>
        
</
div
>
    
</
div
>
</
div
>
Tailwind CSS
Tailwind CSS es un framework 
utility-first
, lo que significa que ofrece clases de utilidad para aplicar estilos
sin necesidad de escribir CSS personalizado.
Características principales:
Mayor control sobre el diseño
 sin necesidad de archivos CSS separados.
Personalización flexible
 a través de configuración avanzada.
Ideal para el desarrollo rápido
 sin necesidad de componentes predefinidos.
Ejemplo de Tailwind CSS
html
<
button
 
class
=
"bg-blue-500 text-white px-4 py-2 rounded-lg"
>
   Botón Azul
</
button
>
Estos frameworks facilitan la creación de interfaces atractivas y adaptables sin necesidad de escribir grandes
cantidades de código CSS personalizado.
4.2 Frameworks de JavaScript para Interfaces de Usuario
Los frameworks de JavaScript han permitido el desarrollo de 
aplicaciones dinámicas e interactivas
,
simplificando la manipulación del DOM y mejorando la experiencia del usuario.
React.js
React es una 
biblioteca de JavaScript
 desarrollada por 
Meta (Facebook)
 que permite construir interfaces
basadas en 
componentes reutilizables
.
Características principales:
Basado en componentes
, lo que permite reutilización y modularidad.
Virtual DOM
, que mejora el rendimiento al actualizar solo las partes necesarias del DOM.
JSX (JavaScript XML)
, que permite escribir HTML dentro del código JavaScript.
Documento solo para uso personal. Prohibido copiar o distribuir
18/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Ejemplo de componente en React
javascript
function
 
Saludo
(
) {
   
return
 
<
h1
>
Hola, React!
</
h1
>
;
}
Vue.js
Vue.js es un framework de JavaScript ligero y progresivo, ideal para desarrollar interfaces 
de manera
sencilla y escalable
.
Características principales:
Curva de aprendizaje sencilla
.
Binding de datos bidireccional
, lo que facilita la manipulación del DOM.
Estructura flexible
, adecuada tanto para proyectos pequeños como grandes.
Ejemplo de Vue.js
html
<
div
 
id
=
"app"
>
    
<
p
>
{{ mensaje }}
</
p
>
</
div
>
<
script
>
    
new
 
Vue
({
        
el
: 
"#app"
,
        
data
: {
            
mensaje
: 
"Hola, Vue!"
        }
    });
</
script
>
Angular
Angular es un framework desarrollado por 
Google
, diseñado para la creación de aplicaciones 
de gran escala
y alto rendimiento
.
Características principales:
Basado en TypeScript
, con tipado estático para mayor robustez.
Arquitectura basada en módulos
, facilitando la organización del código.
Inyección de dependencias
, lo que mejora la escalabilidad de las aplicaciones.
Ejemplo de Angular
typescript
@Component({
  selector: 
"app-hola"
,
  template: `<h1>{{ mensaje }}</h1>`
})
export 
class
 
HolaComponent
 {
  mensaje = 
"Hola, Angular!"
;
}
Documento solo para uso personal. Prohibido copiar o distribuir
19/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Cada uno de estos frameworks ofrece ventajas específicas según el tipo de proyecto. React es ideal para
componentes reutilizables
, Vue.js para 
desarrollo ágil y sencillo
, y Angular para 
aplicaciones
empresariales de gran escala
.
4.3 Frameworks para Aplicaciones Móviles
El desarrollo móvil ha evolucionado con la aparición de frameworks que permiten escribir código en
JavaScript y tecnologías web
 para crear aplicaciones nativas y multiplataforma.
React Native
React Native, desarrollado por 
Meta (Facebook)
, permite crear aplicaciones móviles para 
Android e iOS
utilizando código en 
JavaScript y React
.
Características principales:
Código reutilizable
, con más del 90% compartido entre plataformas.
Acceso a APIs nativas
 como cámara, GPS y almacenamiento.
Rendimiento optimizado
 al renderizar con componentes nativos.
Ejemplo de React Native
javascript
import
 
React
 
from
 
"react"
;
import
 { 
Text
, 
View
 } 
from
 
"react-native"
;
export
 
default
 
function
 
App
(
) {
   
return
 (
       
<
View
>
            
<
Text
>
Hola, React Native!
</
Text
>
       
</
View
>
    );
}
Ionic
Ionic es un framework basado en 
HTML, CSS y JavaScript
, diseñado para crear aplicaciones híbridas que
pueden ejecutarse tanto en navegadores como en dispositivos móviles.
Características principales:
Basado en tecnologías web estándar
.
Compatibilidad con Angular, React y Vue.js
.
Uso de WebView
, lo que permite ejecutar la aplicación en un entorno nativo.
Ejemplo de Ionic
html
<
ion-button
 
color
=
"primary"
>
Botón Ionic
</
ion-button
>
Los frameworks móviles han facilitado el desarrollo 
multiplataforma
, reduciendo costos y tiempos de
desarrollo al permitir reutilizar el mismo código en distintas plataformas.
Documento solo para uso personal. Prohibido copiar o distribuir
20/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
4.4 Consideraciones para la Implementación de Frameworks
Al elegir un framework para un proyecto, es importante considerar varios factores:
1
. 
Accesibilidad
:
Cumplir con estándares de accesibilidad (WCAG).
Usar roles ARIA para mejorar la compatibilidad con lectores de pantalla.
1
. 
Rendimiento
:
Evitar renderizado innecesario en frameworks de JavaScript.
Optimizar imágenes y recursos en aplicaciones móviles.
1
. 
Pruebas y compatibilidad
:
Probar la interfaz en múltiples navegadores y dispositivos.
Usar herramientas como 
BrowserStack
 para pruebas cruzadas.
4
. 
Seguridad
:
Prevenir ataques de 
Cross-Site Scripting (XSS)
 en aplicaciones web.
Usar autenticación segura en frameworks de aplicaciones móviles.
Conclusión
El uso de frameworks ha transformado el desarrollo web y móvil, permitiendo crear 
interfaces modernas,
responsivas y escalables
 con menor esfuerzo. Herramientas como 
Bootstrap y Tailwind CSS
 optimizan el
diseño, mientras que frameworks de JavaScript como 
React, Vue.js y Angular
 facilitan la creación de
aplicaciones dinámicas e interactivas. Para el desarrollo móvil, 
React Native e Ionic
 ofrecen soluciones
eficientes para la construcción de aplicaciones multiplataforma.
Elegir el framework adecuado depende del tipo de proyecto, la escalabilidad y las necesidades del equipo de
desarrollo. Una implementación adecuada garantiza 
rendimiento, accesibilidad y seguridad
, fundamentales
en cualquier aplicación moderna.
5. Consideraciones para la Implementación
La implementación de interfaces web y móviles no solo depende del uso de 
HTML5, CSS3, JavaScript y
frameworks
, sino también de la aplicación de buenas prácticas para garantizar 
accesibilidad, rendimiento,
compatibilidad, pruebas y seguridad
. Estos aspectos son fundamentales para proporcionar una experiencia
de usuario óptima y asegurar que la aplicación sea robusta, escalable y segura.
En este apartado, exploraremos los principales aspectos a considerar durante la implementación de una
interfaz web o móvil.
5.1 Accesibilidad: Interfaces para Todos los Usuarios
La accesibilidad web se refiere a la capacidad de una página o aplicación para ser utilizada por 
todas las
personas
, incluidas aquellas con discapacidades visuales, auditivas, motoras o cognitivas. Para garantizar
una experiencia inclusiva, se deben seguir las 
Pautas de Accesibilidad para el Contenido Web (WCAG)
.
Documento solo para uso personal. Prohibido copiar o distribuir
21/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Principales prácticas para mejorar la accesibilidad
Uso de etiquetas semánticas
 (
<header>
, 
<nav>
, 
<section>
, 
<footer>
).
Compatibilidad con lectores de pantalla
 mediante atributos 
ARIA (Accessible Rich Internet
Applications)
.
Uso adecuado de colores y contraste
 para mejorar la legibilidad.
Soporte para navegación mediante teclado
, evitando depender solo del mouse o gestos táctiles.
Ejemplo de uso de ARIA en un botón accesible
html
<
button
 
aria-label
=
"Abrir menú de navegación"
>
    
<
span
 
class
=
"icon-menu"
>
</
span
>
</
button
>
Herramientas para verificar accesibilidad
Lighthouse (Google Chrome DevTools)
Wave (WebAIM)
Axe DevTools
Implementar accesibilidad no solo mejora la experiencia de usuario, sino que también 
cumple con
normativas legales
 en muchos países y mejora el SEO.
5.2 Rendimiento: Optimización de Carga y Fluidez
El rendimiento de una aplicación web o móvil influye directamente en la experiencia del usuario. Un tiempo de
carga lento puede llevar a un 
alto porcentaje de abandono
, especialmente en dispositivos móviles con
conexiones limitadas.
Estrategias para mejorar el rendimiento
Minificación y compresión de archivos CSS y JavaScript
 con herramientas como 
Terser y
CSSNano
.
Carga diferida (
Lazy Loading
)
 para imágenes y recursos no esenciales.
Uso de una Content Delivery Network (CDN)
 para distribuir archivos estáticos más rápidamente.
Reducción de solicitudes HTTP
, combinando archivos CSS y JavaScript cuando sea posible.
Ejemplo de carga diferida de imágenes
html
<img src=
"imagen-baja-resolucion.jpg"
 
data
-src=
"imagen-alta-resolucion.jpg"
 
class
=
"lazyload"
>
Herramientas para medir y mejorar el rendimiento
Google PageSpeed Insights
Lighthouse
GTmetrix
Documento solo para uso personal. Prohibido copiar o distribuir
22/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Optimizar el rendimiento es clave para mejorar la velocidad de carga, la retención de usuarios y la
clasificación en motores de búsqueda.
5.3 Pruebas: Compatibilidad y Usabilidad en Diferentes Entornos
Antes de lanzar una aplicación, es fundamental realizar 
pruebas exhaustivas
 en diferentes dispositivos,
navegadores y sistemas operativos. Estas pruebas aseguran que la interfaz funcione correctamente para
todos los usuarios.
Tipos de pruebas recomendadas
1
. 
Pruebas de compatibilidad
: Verificar el funcionamiento en distintos navegadores y dispositivos.
2
. 
Pruebas de usabilidad
: Evaluar la experiencia de usuario mediante encuestas y pruebas con usuarios
reales.
3
. 
Pruebas de rendimiento
: Medir tiempos de carga y respuesta bajo diferentes condiciones de red.
4
. 
Pruebas automatizadas
: Usar herramientas para detectar errores en el código.
Ejemplo de prueba automatizada con Cypress
javascript
describe
(
"Prueba de carga de página"
, (
)
 => {
    it(
"Debe cargar correctamente la página principal"
, () => {
       cy.visit(
"https://mi-sitio-web.com"
);
        cy.
get
(
"h1"
).should(
"contain"
, 
"Bienvenido"
);
   });
});
Herramientas recomendadas para pruebas
BrowserStack
: Simula la visualización en múltiples dispositivos y navegadores.
Cypress
 y 
Selenium
: Para pruebas automatizadas en navegadores.
Lighthouse
: Para pruebas de rendimiento y accesibilidad.
Realizar pruebas antes del lanzamiento reduce el riesgo de errores y mejora la satisfacción del usuario final.
5.4 Seguridad: Protección de Datos y Prevención de Ataques
La seguridad es un aspecto crítico en cualquier aplicación web o móvil. Un diseño inseguro puede exponer
datos sensibles y dejar vulnerabilidades que pueden ser explotadas por atacantes.
Principales amenazas de seguridad en aplicaciones web
Cross-Site Scripting (XSS)
: Inserción de scripts maliciosos en formularios o URLs.
Cross-Site Request Forgery (CSRF)
: Ataques que ejecutan acciones no autorizadas en nombre del
usuario.
Inyección SQL
: Manipulación de consultas a bases de datos.
Buenas prácticas de seguridad
Documento solo para uso personal. Prohibido copiar o distribuir
23/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Validar y sanitizar la entrada de usuario
 para evitar inyecciones SQL y XSS.
Usar HTTPS con certificados SSL
 para encriptar la comunicación.
Autenticación segura
 mediante 
JWT (JSON Web Token)
 o 
OAuth
.
Protección contra CSRF
 con tokens de seguridad.
Ejemplo de prevención de XSS en JavaScript
javascript
function
 
escapeHTML
(
str
) {
   
return
 str.
replace
(
/[&<>"']/g
, 
function
(
match
) {
       
return
 ({
            
"&"
: 
"&amp;"
,
            
"<"
: 
"&lt;"
,
            
">"
: 
"&gt;"
,
            
"\""
: 
"&quot;"
,
            
"'"
: 
"&#39;"
        })[match];
    });
}
Herramientas para analizar la seguridad
OWASP ZAP
: Análisis de vulnerabilidades web.
Burp Suite
: Pruebas de seguridad en aplicaciones web.
Google Security Headers
: Verificación de encabezados de seguridad.
Usar 
componentes reutilizables
 en frameworks como React y Vue.js.
Implementar bases de datos 
NoSQL (MongoDB, Firebase)
 para manejar grandes volúmenes
de datos.
Utilizar servicios en la nube como 
AWS, Google Cloud o Azure
.
Integración continua (
CI/CD
) para actualizaciones rápidas y seguras.
Implementar buenas prácticas de seguridad desde el inicio protege la aplicación y la información de los
usuarios.
5.5 Mantenimiento y Escalabilidad
El mantenimiento y la escalabilidad de una aplicación determinan su capacidad de 
crecimiento y adaptación
a nuevas necesidades
.
Estrategias para garantizar escalabilidad
1
. 
Modularización del código
:
2
. 
Uso de bases de datos escalables
:
3
. 
Despliegue en servidores optimizados
:
4
. 
Automatización de procesos
:
Mantener una aplicación bien estructurada facilita su evolución y reduce costos operativos a largo plazo.
Conclusión
Documento solo para uso personal. Prohibido copiar o distribuir
24/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Las consideraciones para la implementación de interfaces web y móviles van más allá del desarrollo inicial.
Aspectos como 
accesibilidad, rendimiento, pruebas, seguridad y escalabilidad
 son esenciales para
garantizar una experiencia de usuario óptima y una aplicación robusta.
Siguiendo estas mejores prácticas y utilizando herramientas adecuadas, es posible desarrollar interfaces
eficientes, accesibles y seguras
 que se adapten a las necesidades cambiantes del mercado y los usuarios.
Documento solo para uso personal. Prohibido copiar o distribuir
25/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Actividades prácticas
Caso Práctico 17
Estás desarrollando un sitio web para una pequeña empresa de productos orgánicos. Necesitas implementar
una interfaz que sea intuitiva, accesible y visualmente atractiva. Describe cómo utilizarías HTML5, CSS3 y
JavaScript para lograrlo. 
¿Qué características de HTML5, CSS3 y JavaScript usarías para crear una interfaz
web efectiva para esta empresa?
Procesando respuesta, no cierres el navegador, este proceso podría tardar unos segundos
Caso Práctico 18
Tu equipo está desarrollando una aplicación móvil de fitness que debe funcionar tanto en Android como en
iOS. Describe cómo utilizarías frameworks y herramientas para asegurar una implementación eficiente y
coherente en ambas plataformas. 
¿Qué frameworks y herramientas elegirías para desarrollar esta aplicación
de fitness y cómo los aplicarías?
Procesando respuesta, no cierres el navegador, este proceso podría tardar unos segundos
¿Qué características de HTML5, CSS3 y JavaScript usarías para crear una interfaz web
efectiva para esta empresa?
1.
¿Qué frameworks y herramientas elegirías para desarrollar esta aplicación de fitness y cómo
los aplicarías?
1.
Documento solo para uso personal. Prohibido copiar o distribuir
26/26
Implementación de interfaces web y móviles
idalumno:906687|unidad:9|codcurso:INF25E07|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
