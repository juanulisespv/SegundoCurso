{
  "subject": "programacion",
  "theme": 6,
  "source": "contenidos/programaciontests/6.txt",
  "count": 20,
  "questions": [
    { "number": 1, "question": "¿Cómo contribuyen las vistas arquitectónicas a la escalabilidad del software?", "options": [{"key":"A","text":"Eliminando la necesidad de documentar la arquitectura del sistema."},{"key":"B","text":"Permitiendo que todas las funcionalidades del software se desarrollen en un único módulo."},{"key":"C","text":"Organizando el sistema en diferentes perspectivas que facilitan su mantenimiento y crecimiento."},{"key":"D","text":"Evitando la separación de responsabilidades entre los diferentes componentes del sistema."}], "answer": "C" },
    { "number": 2, "question": "¿Cuál es una de las principales ventajas de la herencia en la programación orientada a objetos?", "options": [{"key":"A","text":"Evita la necesidad de definir nuevas clases en un sistema."},{"key":"B","text":"Permite reutilizar código y estructurar jerárquicamente las clases."},{"key":"C","text":"Garantiza que todas las clases tengan los mismos métodos sin excepciones."},{"key":"D","text":"Elimina la necesidad de utilizar encapsulamiento en las clases."}], "answer": "B" },
    { "number": 3, "question": "¿Cuál es una ventaja de utilizar jerarquías de clases en un sistema de gestión de empleados?", "options": [{"key":"A","text":"Permite evitar la reutilización de código en las subclases."},{"key":"B","text":"Facilita la administración de empleados al definir atributos y métodos comunes en una superclase."},{"key":"C","text":"Obliga a que todas las clases hereden de una única clase padre sin posibilidad de modificaciones."},{"key":"D","text":"Impide la personalización del comportamiento de los empleados según su rol."}], "answer": "B" },
    { "number": 4, "question": "¿Qué representa la vista funcional en una arquitectura de software?", "options": [{"key":"A","text":"La interacción y flujo de datos entre los distintos componentes del sistema."},{"key":"B","text":"La organización de los módulos en una jerarquía estructural."},{"key":"C","text":"La representación de los servidores donde se ejecuta el software."},{"key":"D","text":"La seguridad y autenticación del sistema."}], "answer": "A" },
    { "number": 5, "question": "¿Cuál es una de las principales ventajas de utilizar una arquitectura en capas en el desarrollo de software?", "options": [{"key":"A","text":"Facilita el mantenimiento y la evolución del sistema al separar responsabilidades."},{"key":"B","text":"Obliga a que todas las funcionalidades del sistema estén en una sola capa."},{"key":"C","text":"Impide la reutilización de código entre distintos módulos del sistema."},{"key":"D","text":"Hace que la integración de nuevas funcionalidades sea más complicada."}], "answer": "A" },
    { "number": 6, "question": "¿Cuál es una de las principales ventajas del uso de patrones de diseño en el desarrollo de software?", "options": [{"key":"A","text":"Eliminan la necesidad de escribir código nuevo en los proyectos."},{"key":"B","text":"Proveen soluciones reutilizables para problemas comunes, mejorando la mantenibilidad del código."},{"key":"C","text":"Obligan a los desarrolladores a seguir una única estructura rígida en sus aplicaciones."},{"key":"D","text":"Sustituyen completamente la necesidad de modelado conceptual en el diseño de software."}], "answer": "B" },
    { "number": 7, "question": "¿Cuál es una ventaja clave del uso de composición en el diseño de software?", "options": [{"key":"A","text":"Permite que una clase herede todos los métodos y atributos de otra sin restricciones."},{"key":"B","text":"Obliga a que todas las clases compartan una misma jerarquía de herencia."},{"key":"C","text":"Limita la reutilización de código, ya que cada clase debe implementarse desde cero."},{"key":"D","text":"Facilita la modularidad y el mantenimiento del código al establecer relaciones 'tiene un' en lugar de 'es un'."}], "answer": "D" },
    { "number": 8, "question": "¿En qué caso es preferible usar composición en lugar de herencia?", "options": [{"key":"A","text":"Cuando todas las clases comparten exactamente los mismos métodos y atributos."},{"key":"B","text":"Si la relación entre clases es del tipo 'es un' (ejemplo: un Perro es un Animal)."},{"key":"C","text":"Cuando una clase debe contener otra como atributo en lugar de heredar de ella (ejemplo: un Coche tiene un Motor)."},{"key":"D","text":"Si se necesita sobrescribir todos los métodos de la clase padre en la subclase."}], "answer": "C" },
    { "number": 9, "question": "¿Cuál es una de las principales ventajas del modelado conceptual avanzado en el diseño de software?", "options": [{"key":"A","text":"Facilita la reutilización de código y la escalabilidad del sistema."},{"key":"B","text":"Elimina la necesidad de documentar la arquitectura del software."},{"key":"C","text":"Sustituye completamente la programación orientada a objetos."},{"key":"D","text":"Solo es útil en proyectos pequeños y de corta duración."}], "answer": "A" },
    { "number": 10, "question": "¿Qué representa un diagrama de componentes en UML?", "options": [{"key":"A","text":"La interacción entre los usuarios y el sistema."},{"key":"B","text":"El flujo de ejecución de una aplicación."},{"key":"C","text":"La estructura jerárquica de las clases en un programa."},{"key":"D","text":"La organización de los módulos y sus relaciones en un sistema."}], "answer": "D" },
    { "number": 11, "question": "¿Cómo contribuye el modelado conceptual avanzado a la escalabilidad de un sistema?", "options": [{"key":"A","text":"Eliminando la necesidad de modificar el código en futuras expansiones."},{"key":"B","text":"Haciendo que el sistema dependa exclusivamente de la herencia para crecer."},{"key":"C","text":"Evitando el uso de nuevos componentes al agregar funcionalidades."},{"key":"D","text":"Permitiendo agregar nuevas características sin afectar la estructura principal del sistema."}], "answer": "D" },
    { "number": 12, "question": "¿En qué situación es más recomendable utilizar herencia en lugar de composicion","options": [{"key":"A","text":"Cuando una subclase necesita compartir atributos y métodos comunes con una clase padre en una relación \"es un\"."},{"key":"B","text":"Cuando se busca evitar la reutilización de código en diferentes clases."},{"key":"C","text":"Cuando una clase debe contener otra como atributo en lugar de heredar de ella."},{"key":"D","text":"Cuando se quiere reducir la dependencia entre clases y facilitar la escalabilidad del sistema."}], "answer": "A" },
    { "number": 13, "question": "¿Cuál es la principal característica de la sobreescritura de métodos en programación orientada a objetos?", "options": [{"key":"A","text":"Permite que una subclase redefina un método heredado de la clase padre con un comportamiento específico."},{"key":"B","text":"Consiste en definir múltiples métodos con el mismo nombre pero con diferentes parámetros en una misma clase."},{"key":"C","text":"Se utiliza para crear múltiples instancias de una clase sin modificar su estructura."},{"key":"D","text":"Implica el uso exclusivo de métodos estáticos dentro de una jerarquía de clases."}], "answer": "A" },
    { "number": 14, "question": "¿En qué situación es más recomendable usar composición en lugar de herencia?", "options": [{"key":"A","text":"Cuando una subclase necesita sobrescribir los métodos de la clase padre."},{"key":"B","text":"Cuando una clase debe contener otra como parte de su estructura, en lugar de heredar de ella."},{"key":"C","text":"Cuando todas las clases de un sistema comparten exactamente los mismos métodos."},{"key":"D","text":"Cuando se quiere evitar la reutilización de código entre clases."}], "answer": "B" },
    { "number": 15, "question": "¿Cuál es la principal ventaja del patrón Factory en la creación de objetos?", "options": [{"key":"A","text":"Permite crear objetos sin depender directamente de sus clases concretas."},{"key":"B","text":"Requiere que todas las clases hereden de una misma clase base obligatoriamente."},{"key":"C","text":"Evita la necesidad de definir métodos en las clases creadas."},{"key":"D","text":"Permite que cada objeto se cree con una instancia única en todo el sistema."}], "answer": "A" },
    { "number": 16, "question": "¿En qué caso es más recomendable utilizar el patrón Factory en lugar de Singleton?", "options": [{"key":"A","text":"Cuando se necesita garantizar que solo exista una única instancia de una clase en todo el sistema."},{"key":"B","text":"Para restringir la creación de múltiples objetos y asegurar un punto de acceso global."},{"key":"C","text":"Cuando se requiere crear múltiples instancias de diferentes clases sin depender de implementaciones concretas."},{"key":"D","text":"Para evitar la creación de nuevas instancias de una clase en tiempo de ejecución."}], "answer": "C" },
    { "number": 17, "question": "¿Cuál es la función principal de la capa de lógica de negocio en una arquitectura en capas?", "options": [{"key":"A","text":"Gestionar directamente la interfaz gráfica del usuario."},{"key":"B","text":"Almacenar datos en una base de datos sin procesamiento previo."},{"key":"C","text":"Contener la lógica principal del sistema, como validaciones y procesamiento de datos."},{"key":"D","text":"Definir exclusivamente la seguridad del sistema sin relacionarse con otras capas."}], "answer": "C" },
    { "number": 18, "question": "En el ejemplo trabajado, cuál es una ventaja clave del uso del patrón Factory en una API de productos?", "options": [{"key":"A","text":"Permite que cada producto tenga una implementación única sin reutilización de código."},{"key":"B","text":"Obliga a definir manualmente cada instancia de producto dentro del código."},{"key":"C","text":"Limita la posibilidad de agregar nuevos tipos de productos al sistema."},{"key":"D","text":"Facilita la creación de diferentes tipos de productos sin modificar el código base."}], "answer": "D" },
    { "number": 19, "question": "¿Cuál es el principal propósito del patrón Singleton?", "options": [{"key":"A","text":"Permitir la creación de múltiples instancias de una clase en el sistema."},{"key":"B","text":"Facilitar la sobrecarga de métodos en una jerarquía de clases."},{"key":"C","text":"Evitar el uso de herencia y promover la composición."},{"key":"D","text":"Garantizar que una clase tenga una única instancia en toda la aplicación."}], "answer": "D" },
    { "number": 20, "question": "¿Qué permite el polimorfismo en la programación orientada a objetos?", "options": [{"key":"A","text":"Garantizar que todas las clases tengan exactamente los mismos métodos."},{"key":"B","text":"Evitar el uso de herencia en los programas."},{"key":"C","text":"Definir un método en una clase padre y permitir que las clases hijas lo sobrescriban con su propio comportamiento."},{"key":"D","text":"Usar solo un tipo de dato en todas las clases del sistema."}], "answer": "C" }
  ]
}
