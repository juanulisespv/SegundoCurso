{
  "subject": "programacion",
  "theme": 7,
  "source": "contenidos/programaciontests/7.txt",
  "count": 20,
  "questions": [
    { "number": 1, "question": "¿Cuál es la función principal de un DTO en una arquitectura MVC?", "options": [{"key":"A","text":"Transferir datos entre capas sin exponer directamente el modelo."},{"key":"B","text":"Reemplazar completamente al controlador."},{"key":"C","text":"Almacenar archivos multimedia en el servidor."},{"key":"D","text":"Gestionar la interfaz de usuario."}], "answer": "A" },
    { "number": 2, "question": "¿En qué se diferencia MVC del diseño en capas?", "options": [{"key":"A","text":"MVC se orienta a la separación de responsabilidades en interfaz, lógica y datos; diseño en capas organiza en niveles conceptuales independientes."},{"key":"B","text":"No hay diferencia alguna."},{"key":"C","text":"El diseño en capas solo aplica a aplicaciones móviles."},{"key":"D","text":"MVC obliga a usar un único lenguaje de programación."}], "answer": "A" },
    { "number": 3, "question": "¿Cuándo es preferible usar Django en lugar de Flask?", "options": [{"key":"A","text":"Cuando se desea un framework con muchas herramientas integradas para proyectos complejos."},{"key":"B","text":"Cuando se quiere un microframework extremadamente ligero sin batería incluida."},{"key":"C","text":"Si se necesita programar en Java."},{"key":"D","text":"Si no se va a usar base de datos."}], "answer": "A" },
    { "number": 4, "question": "¿Cuál es la responsabilidad del Modelo en MVC?", "options": [{"key":"A","text":"Gestionar los datos y la lógica de negocio."},{"key":"B","text":"Mostrar la interfaz gráfica únicamente."},{"key":"C","text":"Controlar la conexión de red del servidor."},{"key":"D","text":"Enviar correos electrónicos al usuario."}], "answer": "A" },
    { "number": 5, "question": "¿Cuál es un beneficio de la separación de responsabilidades en MVC?", "options": [{"key":"A","text":"Mejora el mantenimiento y la escalabilidad del sistema."},{"key":"B","text":"Hace el código irrelevante para pruebas."},{"key":"C","text":"Evita la necesidad de documentación."},{"key":"D","text":"Reduce la performance por defecto."}], "answer": "A" },
    { "number": 6, "question": "¿Qué rol tiene el Controlador en MVC?", "options": [{"key":"A","text":"Actuar de intermediario entre Modelo y Vista y procesar solicitudes."},{"key":"B","text":"Almacenar directamente registros en disco sin lógica."},{"key":"C","text":"Renderizar estilos CSS."},{"key":"D","text":"Gestionar únicamente la autenticación."}], "answer": "A" },
    { "number": 7, "question": "¿Cuál es una ventaja del patrón Repository?", "options": [{"key":"A","text":"Proporciona una abstracción para el acceso a datos evitando dependencias directas con la fuente de datos."},{"key":"B","text":"Reemplaza la necesidad de un ORM por completo."},{"key":"C","text":"Especifica la interfaz de usuario."},{"key":"D","text":"Siempre aumenta el rendimiento de las consultas."}], "answer": "A" },
    { "number": 8, "question": "¿Cómo se implementa un Repository en Django?", "options": [{"key":"A","text":"Encapsulando consultas del ORM dentro de clases o funciones que actúan como capa de acceso a datos."},{"key":"B","text":"Escribiendo SQL en la vista."},{"key":"C","text":"Eliminando el uso del ORM y usando solo archivos planos."},{"key":"D","text":"Almacenando datos en cookies."}], "answer": "A" },
    { "number": 9, "question": "¿Qué es un DAO (Data Access Object)?", "options": [{"key":"A","text":"Una capa que encapsula el acceso a la base de datos y centraliza consultas parametrizadas."},{"key":"B","text":"Un tipo especial de vista en MVC."},{"key":"C","text":"Un framework de testing."},{"key":"D","text":"Un widget de interfaz."}], "answer": "A" },
    { "number": 10, "question": "¿Cuál es una diferencia clave entre DAO y Repository?", "options": [{"key":"A","text":"DAO suele mapear operaciones directas de la base de datos; Repository ofrece una abstracción más orientada al dominio."},{"key":"B","text":"No existe diferencia técnica entre ambos."},{"key":"C","text":"Repository solo se usa en Java y DAO en Python."},{"key":"D","text":"DAO siempre contiene lógica de negocio compleja."}], "answer": "A" },
    { "number": 11, "question": "¿Cómo se define un DTO en Python?", "options": [{"key":"A","text":"Como una clase simple con los atributos necesarios para transferir datos entre capas."},{"key":"B","text":"Como una función que renderiza plantillas."},{"key":"C","text":"Como un script de migración de base de datos."},{"key":"D","text":"Como un tipo de prueba unitaria."}], "answer": "A" },
    { "number": 12, "question": "¿Qué ventaja aporta centralizar el acceso a datos mediante DAO/Repository?", "options": [{"key":"A","text":"Facilita el mantenimiento, pruebas y uso de consultas parametrizadas (seguridad)."},{"key":"B","text":"Obliga a escribir menos pruebas unitarias."},{"key":"C","text":"Aumenta el acoplamiento entre capas."},{"key":"D","text":"Evita la necesidad de documentación de la base de datos."}], "answer": "A" },
    { "number": 13, "question": "¿Cuál es una práctica recomendada al usar ORM en Flask?", "options": [{"key":"A","text":"Usar migraciones para sincronizar modelos con la base de datos y evitar consultas SQL inline."},{"key":"B","text":"Evitar el uso de migraciones siempre."},{"key":"C","text":"Escribir SQL directamente en cada ruta."},{"key":"D","text":"Almacenar credenciales en el repositorio público."}], "answer": "A" },
    { "number": 14, "question": "¿Qué patrón ayuda a evitar dependencias directas con implementaciones concretas de almacenamiento?", "options": [{"key":"A","text":"Factory o Repository cuando se usan para abstraer la creación y acceso a datos."},{"key":"B","text":"Singleton exclusivamente para almacenar consultas SQL."},{"key":"C","text":"Anti-pattern de acoplamiento global."},{"key":"D","text":"Uso de variables globales con SQL hardcodeado."}], "answer": "A" },
    { "number": 15, "question": "¿Qué ventaja tiene usar DTOs frente a pasar modelos directamente a la vista?", "options": [{"key":"A","text":"Evitan exponer datos sensibles y permiten adaptar la estructura para la vista o API."},{"key":"B","text":"Incrementan el acoplamiento entre la base de datos y la vista."},{"key":"C","text":"Obligan a duplicar la lógica de negocio en la vista."},{"key":"D","text":"Son útiles solo en aplicaciones de escritorio."}], "answer": "A" },
    { "number": 16, "question": "¿Qué herramienta facilita documentar y probar APIs en formato OpenAPI?", "options": [{"key":"A","text":"Swagger (OpenAPI)"},{"key":"B","text":"SQLite"},{"key":"C","text":"Tkinter"},{"key":"D","text":"Kivy"}], "answer": "A" },
    { "number": 17, "question": "¿Cuál es una buena práctica al implementar acceso a datos para seguridad?", "options": [{"key":"A","text":"Usar consultas parametrizadas para prevenir SQL injection."},{"key":"B","text":"Concatenar strings para generar SQL dinámico con inputs del usuario."},{"key":"C","text":"Almacenar contraseñas en texto plano."},{"key":"D","text":"Exponer la cadena de conexión públicamente."}], "answer": "A" },
    { "number": 18, "question": "¿Qué ventaja tiene usar Django ORM en comparación con escribir SQL a mano?", "options": [{"key":"A","text":"Permite trabajar con objetos Python y manejar migraciones y compatibilidad entre BD."},{"key":"B","text":"Es más lento e inseguro por diseño."},{"key":"C","text":"Hace imposible escribir consultas complejas."},{"key":"D","text":"Solo funciona con bases de datos NoSQL."}], "answer": "A" },
    { "number": 19, "question": "¿Qué se debe evitar al diseñar una capa Repository/DAO?", "options": [{"key":"A","text":"Incluir lógica de negocio compleja en el acceso a datos."},{"key":"B","text":"Centralizar todas las consultas en un módulo reutilizable."},{"key":"C","text":"Usar métodos parametrizados y testables."},{"key":"D","text":"Documentar las interfaces públicas."}], "answer": "A" },
    { "number": 20, "question": "¿Cuál es un beneficio clave de aplicar patrones como DAO/Repository/DTO?", "options": [{"key":"A","text":"Reducir el acoplamiento, facilitar pruebas y mejorar la seguridad y mantenibilidad."},{"key":"B","text":"Eliminar la necesidad de pruebas unitarias."},{"key":"C","text":"Aumentar la dependencia entre módulos."},{"key":"D","text":"Garantizar que el código no requiera refactorizaci"}], "answer": "A" }
  ]
}
