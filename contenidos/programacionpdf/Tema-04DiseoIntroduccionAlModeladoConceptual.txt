Diseño Introducción al modelado
conceptual
© Universitas Europaea IMF
Indice
Diseño Introducción al modelado conceptual
3
1. Introducción al Modelado Conceptual
3
1.1. Definición y objetivos del modelado conceptual
3
1.2. Relación entre la Ingeniería de requisitos y la construcción del modelo conceptual
3
1.3. Importancia del modelado conceptual en el diseño de sistemas
4
1.4. Beneficios del modelado conceptual para el desarrollo de software
5
2. Conceptos Básicos del Modelado Conceptual
6
2.1. Elementos clave del modelado conceptual
6
2.1.1. Clases, Atributos y Métodos
6
2.1.2. Relaciones: Asociaciones, Agregaciones y Composiciones
6
2.2. Modelado conceptual vs. modelado lógico: diferencias y aplicaciones
6
2.3. Reglas y buenas prácticas en el modelado conceptual
7
3. Diagramas de Clases y Objetos utilizando UML
8
3.1. Introducción al Lenguaje Unificado de Modelado (UML).
8
3.2. Componentes de un diagrama de clases
9
3.2.1 Clases, Atributos, Métodos y Visibilidad
9
3.2.2. Tipos de Relaciones: Asociación, Herencia, Composición y Agregación
10
3.3. Ejemplos prácticos: diagramas de clases para sistemas comunes
10
3.3.1 Tienda Online
10
3.3.2 Sistema de Biblioteca
12
3.4. Diagramas de objetos. Representación de instancias específicas
13
4. Uso del Modelado conceptual
14
4.1. Relevancia del modelado conceptual en proyectos reales
14
4.2. Recomendaciones para aplicar el modelado conceptual de manera efectiva
15
4.3 Herramientas para el Modelado Conceptual
16
Características Principales y Casos de Uso:
16
Comparativa entre Herramientas:
16
4.3.2. Integración de herramientas de modelado en flujos de desarrollo ágiles
16
4.4. Ventajas de vincular modelos conceptuales con implementaciones prácticas
17
4.4.1. Ventajas Principales
17
4.4.2. Ejemplo en UML
18
4.4.3. Representación en Python
18
4.4.4. Representación en SQL
19
Bibliografía y lecturas recomendadas:
19
Actividades prácticas
21
Documento solo para uso personal. Prohibido copiar o distribuir
2/21
Diseño Introducción al modelado conceptual
1. Introducción al Modelado Conceptual
El modelado conceptual es una técnica clave en el diseño de sistemas, que permite representar de manera
abstracta los elementos principales y sus relaciones en un sistema. Su objetivo es comprender y estructurar
las necesidades del proyecto, sirviendo como base para el diseño técnico e implementación del software.
1.1. Definición y objetivos del modelado conceptual
El modelado conceptual es el proceso de representar de manera abstracta los elementos fundamentales de
un sistema y sus relaciones. Se centra en definir 
qué es
 el sistema y 
qué debe hacer
, sin entrar en detalles
técnicos sobre cómo se implementará. Este enfoque permite a los stakeholders y al equipo técnico compartir
una visión común antes de iniciar las fases de diseño e implementación.
El modelado conceptual es una herramienta esencial para garantizar que el desarrollo de software esté
alineado con los objetivos del cliente y las necesidades de los usuarios.
1.2. Relación entre la Ingeniería de requisitos y la construcción del
modelo conceptual
Definición:
El modelado conceptual utiliza diagramas y descripciones para capturar los conceptos
clave de un sistema, como entidades, atributos y relaciones. Por ejemplo, en un sistema de
gestión de pedidos, los conceptos podrían ser clientes, productos y pedidos, junto con las
relaciones entre ellos, como "un cliente realiza múltiples pedidos".
Objetivos del modelado conceptual:
1
. 
Comprensión compartida:
 Ayuda a los stakeholders y desarrolladores a entender
el alcance y los requisitos del sistema.
2
. 
Estructura clara:
 Proporciona una base estructurada para las siguientes etapas de
diseño lógico e implementación técnica.
3
. 
Resolución de inconsistencias:
 Identifica y corrige errores o conflictos en los
requisitos antes de avanzar en el desarrollo.
4
. 
Documentación:
 Actúa como referencia visual para todo el equipo, facilitando la
comunicación y el mantenimiento del sistema.
5
. 
Flexibilidad:
 Permite adaptarse a cambios en los requisitos de manera más
eficiente al estar en una etapa inicial del proceso.
Documento solo para uso personal. Prohibido copiar o distribuir
3/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
La ingeniería de requisitos y el modelado conceptual son etapas interrelacionadas en el ciclo de vida del
desarrollo de software. Mientras que la ingeniería de requisitos se centra en identificar, analizar y documentar
las necesidades del sistema, el modelado conceptual traduce esas necesidades en una representación visual
y estructurada que sirve como puente entre los requisitos y el diseño técnico.
1
Relación directa:
1
. 
Identificación de conceptos clave:
 Los requisitos funcionales y no funcionales recopilados
durante la ingeniería de requisitos se convierten en entidades, atributos y relaciones en el modelo
conceptual. Por ejemplo, un requisito funcional como "el sistema debe permitir gestionar clientes" se
representa en el modelo conceptual mediante una entidad "Cliente" con atributos como nombre,
correo y teléfono.
2
. 
Organización de la información:
 El modelo conceptual organiza los requisitos en una estructura
clara, mostrando cómo interactúan las distintas partes del sistema. Esto facilita la comprensión tanto
para los stakeholders como para los desarrolladores.
3
. 
Detección de conflictos:
 Durante la transición de requisitos al modelo conceptual, pueden
identificarse inconsistencias o vacíos, lo que permite resolverlos antes de avanzar al diseño técnico.
2
Beneficios de la relación:
Facilita la comunicación entre los stakeholders y el equipo técnico al ofrecer una representación
visual.
Asegura que los requisitos estén correctamente interpretados y alineados con el diseño del sistema.
Proporciona una base sólida para las fases posteriores del desarrollo, minimizando riesgos y
errores.
En resumen, el modelado conceptual es el resultado directo de la ingeniería de requisitos y actúa como un
mapa que guía el desarrollo del software.
1.3. Importancia del modelado conceptual en el diseño de sistemas
El modelado conceptual es una etapa crucial en el diseño de sistemas, ya que establece una base sólida para
transformar los requisitos en un diseño técnico claro y funcional. Su objetivo principal es representar los
elementos clave del sistema, como entidades, atributos y relaciones, de manera abstracta pero comprensible
para todos los involucrados en el proyecto. El modelado conceptual no solo organiza y clarifica los requisitos,
sino que también asegura que el diseño del sistema sea eficiente, escalable y adaptable a las necesidades del
cliente.
Claridad y comunicación
El modelado conceptual proporciona una representación visual que facilita la comunicación entre los
stakeholders y el equipo técnico. Ayuda a garantizar que todos compartan una comprensión común del
sistema y que los requisitos sean interpretados correctamente antes de entrar en detalles técnicos.
Documento solo para uso personal. Prohibido copiar o distribuir
4/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Estructura organizada
Al descomponer el sistema en conceptos clave y sus relaciones, el modelado conceptual crea una
estructura clara y organizada. Esto permite detectar errores o inconsistencias en una etapa temprana,
reduciendo riesgos y costos asociados a cambios en fases avanzadas.
Facilitador del diseño técnico
El modelo conceptual actúa como un puente entre la ingeniería de requisitos y el diseño técnico.
Proporciona una guía estructurada para desarrollar diagramas UML, modelos de datos y arquitecturas
técnicas, asegurando que el sistema final sea coherente y esté alineado con los objetivos del proyecto.
1.4. Beneficios del modelado conceptual para el desarrollo de
software
El modelado conceptual aporta numerosos beneficios al desarrollo de software, ya que actúa como un puente
entre la identificación de requisitos y la implementación técnica. Su objetivo es garantizar que el sistema final
sea coherente, escalable y alineado con las necesidades del cliente. El modelado conceptual optimiza el
desarrollo de software al organizar, clarificar y estructurar los requisitos, asegurando que el producto final
cumpla con las expectativas de los stakeholders.
Claridad en los requisitos
Al traducir los requisitos en entidades, atributos y relaciones, el modelado conceptual proporciona una
representación visual que facilita la comprensión y comunicación entre los stakeholders y el equipo técnico.
Esto reduce malentendidos y asegura una interpretación precisa de las necesidades del sistema.
Identificación temprana de errores
El modelado conceptual permite detectar inconsistencias, conflictos o vacíos en los requisitos en una etapa
temprana del desarrollo. Esto minimiza el riesgo de realizar cambios costosos en fases avanzadas como el
diseño o la implementación.
Base para el diseño técnico
Proporciona una estructura organizada que sirve como punto de partida para el diseño lógico y técnico,
como la creación de diagramas UML, bases de datos y arquitecturas de software. Esto asegura que el
desarrollo sea más eficiente y alineado con los objetivos del proyecto.
Adaptabilidad a cambios
Un modelo conceptual bien estructurado facilita la incorporación de modificaciones en los requisitos sin
comprometer la cohesión del sistema.
Documento solo para uso personal. Prohibido copiar o distribuir
5/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
2. Conceptos Básicos del Modelado Conceptual
2.1. Elementos clave del modelado conceptual
El modelado conceptual utiliza elementos fundamentales para representar de manera abstracta los
componentes principales de un sistema y sus interacciones. Estos elementos incluyen clases, atributos,
métodos y relaciones, que juntos forman la estructura básica del modelo. Estos elementos clave permiten
estructurar y visualizar las entidades y relaciones de un sistema, sirviendo como base para su diseño e
implementación. Un modelo conceptual bien definido asegura claridad, organización y alineación con los
requisitos del proyecto.
2.1.1. Clases, Atributos y Métodos
Clases: 
Las clases representan entidades u objetos del mundo real en el sistema. Cada clase se
define por su nombre y describe un conjunto de características y comportamientos comunes a todas
sus instancias. Por ejemplo, en un sistema de gestión de biblioteca, "Libro" y "Usuario" podrían ser
clases.
Atributos: 
Los atributos describen las propiedades o características de una clase. Por ejemplo, la
clase "Libro" podría tener atributos como título, autor y ISBN. Cada atributo tiene un tipo de dato
asociado que define el tipo de información que almacena (e.g., texto, número, fecha).
Métodos: 
Los métodos representan las acciones o comportamientos asociados a una clase. Son
funciones que operan sobre los datos de la clase. Por ejemplo, un método para la clase "Libro" podría
ser prestar(), que actualiza el estado del libro a "prestado".
2.1.2. Relaciones: Asociaciones, Agregaciones y Composiciones
Asociación: 
Representa una relación general entre dos clases. Por ejemplo, en un sistema escolar, un
"Estudiante" puede estar asociado con "Curso", lo que indica que un estudiante está inscrito en uno o
más cursos. La asociación puede ser unidireccional o bidireccional, dependiendo de cómo interactúen
las clases.
Agregación: 
Es un tipo especial de asociación que representa una relación "parte-todo", donde las
partes pueden existir independientemente del todo. Por ejemplo, una "Universidad" puede estar
compuesta por varias "Facultades", pero cada facultad podría existir sin depender de una universidad
específica.
Composición: 
Es una relación "parte-todo" más fuerte que la agregación, donde las partes no pueden
existir independientemente del todo. Por ejemplo, un "Pedido" puede estar compuesto por varios
"Ítems", pero si se elimina el pedido, también se eliminan los ítems asociados.
2.2. Modelado conceptual vs. modelado lógico: diferencias y
aplicaciones
El modelado conceptual y el modelado lógico son fases esenciales en el diseño de sistemas, pero tienen
propósitos y enfoques diferentes. Ambos son complementarios y se utilizan para garantizar que el desarrollo
del software esté alineado con los objetivos del proyecto.
Documento solo para uso personal. Prohibido copiar o distribuir
6/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Modelado Conceptual
El modelado conceptual se centra en representar de manera abstracta las entidades principales del
sistema y sus relaciones, sin entrar en detalles técnicos. Es una etapa inicial que busca capturar las
necesidades y objetivos del cliente de forma clara y comprensible para todos los stakeholders.
Características:
Representa entidades, atributos y relaciones (e.g., asociación, agregación, composición).
No incluye detalles técnicos ni dependencias específicas de software o hardware.
Es independiente de la tecnología utilizada para la implementación.
Aplicaciones:
Facilita la comunicación entre stakeholders y desarrolladores.
Sirve como base para identificar requisitos y diseñar modelos más detallados.
Ayuda a resolver conflictos en los requisitos antes de avanzar al diseño técnico.
Modelado Lógico
El modelado lógico es una representación más detallada que traduce el modelo conceptual en estructuras
técnicas que puedan ser implementadas.
Características:
Define tablas, claves primarias y foráneas en el caso de bases de datos.
Incluye decisiones tecnológicas, como lenguajes de programación o plataformas específicas.
Detalla flujos de datos y procesos del sistema.
Aplicaciones:
Base para implementar bases de datos y arquitecturas técnicas.
Optimiza el rendimiento y asegura la viabilidad técnica del sistema.
2.3. Reglas y buenas prácticas en el modelado conceptual
El modelado conceptual es una etapa fundamental en el diseño de sistemas, y para garantizar su efectividad,
es crucial seguir ciertas reglas y buenas prácticas. Estas aseguran que el modelo sea claro, comprensible y
útil para las etapas posteriores del desarrollo.
Diferencias clave:
El modelado conceptual responde al 
"qué"
 del sistema, mientras que el modelado
lógico aborda el 
"cómo"
.
El modelado conceptual es independiente de la tecnología; el lógico la define.
Documento solo para uso personal. Prohibido copiar o distribuir
7/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Reglas esenciales del modelado conceptual:
1
. 
Claridad y simplicidad:
 El modelo debe ser fácil de entender para todos los stakeholders,
independientemente de su nivel técnico. Evitar el exceso de detalles técnicos o información
redundante.
2
. 
Consistencia:
 Los nombres de clases, atributos y relaciones deben ser coherentes y reflejar el
dominio del problema. Por ejemplo, si se utiliza "Cliente" en un contexto, no alternar con "Usuario"
sin razón justificada.
3
. 
Completitud:
 Incluir todas las entidades, atributos y relaciones relevantes para representar
completamente los requisitos del sistema.
Buenas prácticas:
1
. 
Iteración constante:
 El modelado conceptual no debe considerarse definitivo desde el inicio; iterar
y ajustar conforme se obtenga retroalimentación de los stakeholders.
2
. 
Uso de diagramas visuales:
 Representar entidades y relaciones mediante diagramas UML o
herramientas como Draw.io o Lucidchart mejora la comprensión del modelo.
3
. 
Colaboración:
 Involucrar a los stakeholders durante la creación y revisión del modelo para
garantizar que refleje sus necesidades y expectativas.
4
. 
Documentación:
 Complementar el modelo con descripciones textuales para evitar ambigüedades.
3. Diagramas de Clases y Objetos utilizando UML
Los diagramas de clases y objetos son herramientas clave del Lenguaje Unificado de Modelado (UML) que
representan la estructura estática de un sistema. Los diagramas de clases muestran las entidades principales,
sus atributos, métodos y relaciones, proporcionando una visión general del diseño. Por otro lado, los
diagramas de objetos representan instancias específicas de las clases, destacando cómo interactúan en un
momento determinado. Estas herramientas son fundamentales para visualizar la arquitectura del sistema,
facilitar la comunicación entre los stakeholders y servir como base para la implementación técnica del
software.
3.1. Introducción al Lenguaje Unificado de Modelado (UML).
El Lenguaje Unificado de Modelado (UML, por sus siglas en inglés) es un estándar ampliamente utilizado para
visualizar, especificar, construir y documentar sistemas de software. Fue desarrollado en la década de 1990
por Grady Booch, James Rumbaugh e Ivar Jacobson, quienes unificaron diversas metodologías de modelado
existentes en un solo lenguaje común. UML es particularmente valioso en proyectos de desarrollo de
software, ya que facilita la representación gráfica de los diferentes aspectos del sistema.
Propósito de UML
UML proporciona un lenguaje visual para modelar tanto la estructura estática como el comportamiento
dinámico de un sistema. Esto permite a los desarrolladores y stakeholders comprender cómo está
diseñado el sistema, cómo interactúan sus componentes y cómo responde a diferentes escenarios.
Además, UML no está ligado a ningún lenguaje de programación específico, lo que lo hace versátil para
equipos técnicos con diferentes herramientas y enfoques.
Documento solo para uso personal. Prohibido copiar o distribuir
8/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Características de UML
Estándar visual:
 Utiliza notaciones gráficas fáciles de interpretar para representar clases, objetos,
procesos y flujos de trabajo.
1
. 
Independencia tecnológica:
 Puede aplicarse en cualquier metodología de desarrollo (ágil, en
cascada, etc.) y no depende de lenguajes de programación específicos.
2
. 
Flexibilidad:
 Soporta desde sistemas simples hasta proyectos altamente complejos, integrando
tanto vistas estáticas como dinámicas.
Diagramas de UML
UML se organiza en diferentes tipos de diagramas que representan aspectos específicos del sistema. Los
más destacados incluyen:
Diagramas de clases:
 Representan la estructura estática del sistema, mostrando clases, atributos,
métodos y relaciones.
Diagramas de casos de uso:
 Describen las interacciones entre los actores y el sistema,
identificando los objetivos principales.
Diagramas de secuencia:
 Modelan el flujo de mensajes entre objetos a lo largo del tiempo.
Diagramas de actividad:
 Representan flujos de trabajo o procesos operativos.
Aplicaciones de UML
UML es ampliamente utilizado en el desarrollo de sistemas empresariales, aplicaciones web y móviles, y
software crítico. Permite al equipo técnico colaborar y alinear objetivos, minimizando malentendidos y
asegurando una implementación eficiente. También es una herramienta de documentación que facilita el
mantenimiento y la escalabilidad del sistema. UML es una herramienta esencial en el desarrollo de
software moderno, ya que permite representar sistemas complejos de manera clara y estructurada. Su
flexibilidad y capacidad de adaptación lo convierten en un estándar ampliamente aceptado en la industria.
3.2. Componentes de un diagrama de clases
Los diagramas de clases son una herramienta esencial del Lenguaje Unificado de Modelado (UML) que
representan la estructura estática de un sistema. Capturan las entidades principales del sistema, sus
características (atributos) y comportamientos (métodos), además de las relaciones entre estas entidades. A
continuación, se detallan los componentes clave de un diagrama de clases.
3.2.1 Clases, Atributos, Métodos y Visibilidad
Documento solo para uso personal. Prohibido copiar o distribuir
9/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
1
. 
Clases:
Las clases son los bloques principales en un diagrama de clases y representan las entidades del
sistema. Se definen mediante un rectángulo dividido en tres partes:
Nombre de la clase:
 La primera sección contiene el nombre de la clase, que debe ser
descriptivo y único (e.g., Usuario, Producto, Pedido).
Atributos:
 La segunda sección contiene las propiedades de la clase, que describen sus
características. Por ejemplo, la clase Usuario podría tener atributos como nombre, email y
contraseña.
Métodos:
 La tercera sección contiene las operaciones o funciones que realiza la clase. Por
ejemplo, un método de Usuario podría ser iniciarSesion().
2
. 
Visibilidad:
La visibilidad define el nivel de acceso a los atributos y métodos de una clase:
Pública (+):
 Accesible desde cualquier lugar.
Protegida (#):
 Accesible solo desde la clase y sus subclases.
Privada (-):
 Accesible únicamente dentro de la clase.
3.2.2. Tipos de Relaciones: Asociación, Herencia, Composición y Agregación
1
. 
Asociación:
Representa una relación general entre dos clases. Puede ser unidireccional (una clase conoce a otra)
o bidireccional (ambas clases se conocen). Por ejemplo, un Estudiante está asociado con un Curso.
2
. 
Herencia:
Indica que una clase hija hereda atributos y métodos de una clase padre. Se representa con una línea
con un triángulo vacío apuntando hacia la clase padre. Por ejemplo, Administrador hereda de Usuario.
3
. 
Agregación:
Representa una relación "parte-todo" en la que las partes pueden existir independientemente del todo.
Se muestra con una línea y un rombo hueco. Por ejemplo, una Universidad tiene Departamentos, pero
los departamentos pueden existir sin la universidad.
4
. 
Composición:
Es una relación "parte-todo" más fuerte que la agregación. Las partes no pueden existir sin el todo. Se
representa con una línea y un rombo sólido. Por ejemplo, un Pedido está compuesto por Ítems, y si el
pedido se elimina, los ítems también desaparecen.
Estos componentes son fundamentales para estructurar y visualizar un sistema, facilitando la comprensión y
la comunicación entre los stakeholders y el equipo técnico.
3.3. Ejemplos prácticos: diagramas de clases para sistemas
comunes
Los diagramas de clases son herramientas esenciales para representar la estructura estática de un sistema. A
continuación, se presentan ejemplos prácticos de diagramas de clases para dos sistemas comunes: una
tienda online y un sistema de biblioteca.
3.3.1 Tienda Online
Una tienda online permite a los clientes navegar por productos, añadirlos a un carrito de compras y realizar
pedidos.
Clases principales:
Documento solo para uso personal. Prohibido copiar o distribuir
10/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
1
. 
Producto:
 Representa los artículos disponibles en la tienda.
Atributos:
 id, nombre, precio, stock.
Métodos:
 actualizarStock(), aplicarDescuento().
2
. 
Carrito:
 Contiene los productos seleccionados por un cliente.
Atributos:
 idCarrito, total.
Métodos:
 añadirProducto(), eliminarProducto(), calcularTotal().
3
. 
Cliente:
 Representa a los usuarios registrados en la tienda.
Atributos:
 idCliente, nombre, email.
Métodos:
 registrarse(), iniciarSesion().
4
. 
Pedido:
 Gestiona las compras realizadas por el cliente.
Atributos:
 idPedido, fecha, estado.
Métodos:
 confirmarPedido(), cancelarPedido().
Relaciones:
Un 
Cliente
 tiene asociado uno o más 
Pedidos
.
Un 
Pedido
 incluye uno o más 
Productos
, representando una relación de composición con el 
Carrito
.
Relaciones:
Documento solo para uso personal. Prohibido copiar o distribuir
11/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Un 
Cliente
 tiene uno o más 
Pedidos
 (relación 1..*).
Un 
Carrito
 tiene varios 
Productos
 (relación 1..*).
Un 
Pedido
 está compuesto por un 
Carrito
 (composición).
3.3.2 Sistema de Biblioteca
Un sistema de biblioteca gestiona libros, usuarios y préstamos.
Clases principales:
1
. 
Libro:
 Representa los libros disponibles en la biblioteca.
Atributos:
 isbn, título, autor, disponibilidad.
Métodos:
 prestar(), devolver().
2
. 
Usuario:
 Representa a las personas que acceden a los servicios de la biblioteca.
Atributos:
 idUsuario, nombre, email.
Métodos:
 registrarse(), consultarHistorial().
3
. 
Préstamo:
 Gestiona el préstamo de libros.
Atributos:
 idPrestamo, fechaInicio, fechaDevolución.
Métodos:
 realizarPrestamo(), finalizarPrestamo().
Relaciones:
Un 
Usuario
 puede tener múltiples 
Préstamos
, pero un 
Préstamo
 está relacionado con un único
Libro
.
El 
Libro
 y el 
Préstamo
 tienen una relación de composición, ya que si el préstamo se elimina, no existe
la relación con el libro.
Documento solo para uso personal. Prohibido copiar o distribuir
12/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Relaciones:
Un 
Usuario
 tiene múltiples 
Préstamos
 (relación 1..*).
Cada 
Préstamo
 está relacionado con un único 
Libro
 (relación 1..1).
Una 
Biblioteca
 está compuesta por varios 
Libros
 (composición).
Explicación de los Elementos UML Utilizados:
1
. 
Clases:
 Representadas como rectángulos divididos en tres secciones:
Nombre de la clase (parte superior).
Atributos (parte media).
Métodos (parte inferior).
2
. 
Relaciones:
Asociación:
 Línea simple entre clases.
Composición:
 Línea con un rombo sólido en el extremo del "todo".
Cardinalidad:
 Indica cuántas instancias de una clase están asociadas con otra (e.g., 1..*, 1..1).
3.4. Diagramas de objetos. Representación de instancias
específicas
Documento solo para uso personal. Prohibido copiar o distribuir
13/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Los diagramas de objetos son una variante de los diagramas de clases en UML y se utilizan para representar
instancias específicas de las clases
 en un momento determinado. Mientras que los diagramas de clases
muestran la estructura general del sistema (clases, atributos, métodos y relaciones), los diagramas de objetos
proporcionan una vista más concreta, detallando cómo interactúan las instancias de esas clases.
Características Principales:
1
. 
Representación de instancias:
 En lugar de clases abstractas, los diagramas de objetos muestran
objetos concretos y sus valores en un contexto específico. Por ejemplo, en un sistema de biblioteca,
una clase Libro se puede representar como un objeto con valores concretos como isbn = 123456789,
título = "Cien años de soledad".
2
. 
Relaciones entre objetos:
 Representan las conexiones entre objetos concretos, basadas en las
relaciones definidas en el diagrama de clases (asociaciones, agregaciones, etc.). Por ejemplo, un
objeto Usuario puede estar vinculado a un objeto Préstamo para un libro específico.
Ventajas:
Claridad:
 Proporcionan un contexto específico y tangible de cómo opera el sistema en situaciones
reales.
Validación:
 Permiten verificar que las relaciones y valores definidos en el diseño conceptual funcionan
correctamente.
4. Uso del Modelado conceptual
4.1. Relevancia del modelado conceptual en proyectos reales
El modelado conceptual es una herramienta esencial en proyectos de desarrollo de software, ya que permite
representar de manera abstracta los elementos principales de un sistema y sus relaciones. Su relevancia
radica en cómo ayuda a traducir los requisitos del cliente en una estructura clara que sirva de base para el
diseño y la implementación.
En proyectos reales, el modelado conceptual facilita la 
comunicación entre los stakeholders
 y el equipo
técnico. Al ser una representación visual e independiente de la tecnología, permite a todos los involucrados
comprender y alinear sus expectativas sobre cómo funcionará el sistema. Esto es especialmente importante
en proyectos complejos con múltiples partes interesadas.
Además, el modelado conceptual ayuda a identificar 
conflictos, inconsistencias o vacíos en los requisitos
antes de avanzar a fases más costosas del desarrollo, como el diseño detallado o la implementación. Esto
reduce riesgos, costos y tiempos asociados a cambios o errores detectados en etapas avanzadas.
Ejemplo
 
en un sisteema de pedidos de una tienda online:
Clase abstracta:
 Cliente.
Objeto:
 cliente1: Cliente { nombre = "Juan Pérez", email = "juan@example.com" }.
Relación concreta:
 cliente1 está asociado a pedido1: Pedido { idPedido = 101,
fecha = "01/01/2025" }.
Documento solo para uso personal. Prohibido copiar o distribuir
14/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Por otro lado, al organizar y estructurar los conceptos clave del sistema, el modelado conceptual proporciona
una base sólida para desarrollar diagramas técnicos como UML, arquitecturas de bases de datos y flujos de
procesos.
4.2. Recomendaciones para aplicar el modelado conceptual de
manera efectiva
El modelado conceptual es una etapa fundamental en el diseño de sistemas, y aplicarlo de manera efectiva
garantiza que el proyecto esté alineado con los requisitos del cliente y los objetivos del negocio. A
continuación, se presentan recomendaciones clave para maximizar su utilidad:
Involucrar a los stakeholders:
La participación activa de los stakeholders durante la creación y revisión del modelo conceptual es
esencial. Esto asegura que las entidades, relaciones y objetivos representados en el modelo reflejen
correctamente las necesidades del cliente.
Usar herramientas visuales adecuadas:
Emplear herramientas como Lucidchart, Draw.io o MS Visio para representar gráficamente el modelo
conceptual facilita la comprensión y la colaboración entre los miembros del equipo.
Iterar y validar el modelo:
El modelado conceptual no debe considerarse un documento definitivo desde el inicio. Es importante iterar
y ajustar el modelo en función de la retroalimentación de los stakeholders y las necesidades emergentes
del proyecto.
Mantener claridad y simplicidad:
Evitar la sobrecarga de detalles técnicos en el modelo conceptual. Este debe ser lo suficientemente simple
para que todos los stakeholders, incluidos los no técnicos, puedan comprenderlo.
Documentar el modelo:
Complementar el diagrama con descripciones textuales que expliquen las entidades, relaciones y
decisiones clave.
En resumen, el modelado conceptual no solo organiza los requisitos del sistema, sino que
también asegura que el proyecto avance de manera eficiente y alineada con los objetivos
del cliente, maximizando la probabilidad de éxito en proyectos reales.
Documento solo para uso personal. Prohibido copiar o distribuir
15/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Aplicar estas recomendaciones asegura que el modelado conceptual sea una herramienta efectiva para guiar
el diseño técnico y mantener alineados a todos los involucrados en el proyecto.
4.3 Herramientas para el Modelado Conceptual
El modelado conceptual requiere herramientas visuales que faciliten la representación de clases, relaciones y
otros elementos clave. Herramientas como 
MS Visio
, 
Draw.io
 y 
Lucidchart
 son ampliamente utilizadas para
este propósito gracias a su versatilidad y facilidad de uso.
Características Principales y Casos de Uso:
1
. 
MS Visio:
Características:
 Ofrece plantillas predefinidas para diagramas UML, diagramas de flujo y
diagramas técnicos. Es ideal para proyectos empresariales complejos y se integra con
herramientas de Microsoft como Teams y SharePoint.
Casos de uso:
 Empresas que trabajan en entornos corporativos y requieren compatibilidad con
otras aplicaciones de Microsoft.
2
. 
Draw.io (ahora Diagrams.net):
Características:
 Gratuito, basado en la web y fácil de usar. Permite colaboración en tiempo
real y guarda archivos en servicios en la nube como Google Drive o OneDrive.
Casos de uso:
 Equipos pequeños que necesitan una herramienta accesible y flexible para
crear diagramas rápidamente.
3
. 
Lucidchart:
Características:
 Herramienta en la nube que soporta colaboraciones en tiempo real, ofrece
integración con aplicaciones como Google Workspace y Slack, y proporciona plantillas
avanzadas para diagramas UML.
Casos de uso:
 Ideal para equipos remotos que trabajan en proyectos colaborativos y necesitan
compartir diagramas dinámicamente.
Comparativa entre Herramientas:
Herramienta
Precio
Integración
Colaboración en
Tiempo Real
Curva de
Aprendizaje
MS Visio
Pago (licencia)
Microsoft 365
Limitada
Media
Draw.io
Gratuito
Google Drive,
OneDrive
Sí
Baja
Lucidchart
Pago (versión básica
gratuita)
Google Workspace,
Slack
Sí
Baja
MS Visio es ideal para proyectos empresariales; Draw.io es una opción gratuita y accesible; mientras que
Lucidchart destaca por su colaboración en equipos remotos. La elección depende del presupuesto, el nivel de
integración necesario y los requisitos específicos del proyecto. Estas herramientas son fundamentales para
modelar sistemas de forma efectiva y colaborativa.
4.3.2. Integración de herramientas de modelado en flujos de desarrollo ágiles
Documento solo para uso personal. Prohibido copiar o distribuir
16/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
En los flujos de desarrollo ágiles, donde la adaptabilidad y la colaboración constante son esenciales, las
herramientas de modelado como 
MS Visio
, 
Draw.io
 y 
Lucidchart
 desempeñan un papel crucial. Estas
herramientas permiten crear y actualizar diagramas de forma rápida, integrándose en las dinámicas iterativas
y colaborativas propias de metodologías como Scrum o Kanban.
Colaboración en tiempo real
Herramientas como 
Lucidchart
 y 
Draw.io
 permiten que varios miembros del equipo trabajen
simultáneamente en el mismo diagrama, facilitando la retroalimentación inmediata durante reuniones de
planificación o revisión de sprint. Esto asegura que todos los stakeholders estén alineados con los cambios
y decisiones del proyecto.
Actualización constante
En un entorno ágil, los requisitos y diseños pueden cambiar de una iteración a otra. Las herramientas de
modelado, al ser fáciles de actualizar, permiten reflejar estos cambios rápidamente. Esto es especialmente
útil para ajustar diagramas de clases, relaciones o flujos de datos según las necesidades emergentes del
cliente.
Integración con otras herramientas
Muchas herramientas de modelado, como 
Lucidchart
, se integran con plataformas de gestión como Jira o
Trello, permitiendo vincular diagramas directamente a tareas específicas del backlog. Esto mejora la
trazabilidad y la comunicación entre los equipos técnicos y no técnicos.
En conclusión, la integración de herramientas de modelado en flujos ágiles mejora la colaboración, facilita los
ajustes rápidos y asegura que el diseño del sistema evolucione de manera alineada con los objetivos del
cliente.
4.4. Ventajas de vincular modelos conceptuales con
implementaciones prácticas
Vincular los modelos conceptuales con implementaciones prácticas es un enfoque esencial en el desarrollo de
software, ya que garantiza que las representaciones abstractas del sistema se traduzcan correctamente en
soluciones técnicas funcionales. Esta vinculación permite al equipo de desarrollo mantener la coherencia
entre los requisitos, el diseño y el código.
4.4.1. Ventajas Principales
1
. 
Coherencia entre diseño y código: 
Al implementar las clases y relaciones definidas en el modelo
conceptual, se asegura que el sistema cumpla con los objetivos del cliente. Esto minimiza
malentendidos y asegura que los cambios en los requisitos se reflejen correctamente en la
implementación.
2
. 
Facilidad de mantenimiento: 
Cuando el diseño conceptual se traduce directamente al código, resulta
más sencillo realizar modificaciones o actualizaciones en el sistema. Los desarrolladores pueden
rastrear cómo las entidades abstractas se reflejan en la base de datos o en las estructuras del código.
3
. 
Trazabilidad: 
Vincular modelos conceptuales con implementaciones prácticas permite identificar
claramente cómo los requisitos iniciales se traducen en componentes funcionales, lo que facilita la
validación y verificación del sistema.
Documento solo para uso personal. Prohibido copiar o distribuir
17/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
4.4.2. Ejemplo en UML
A continuación, una representación en UML del modelo conceptual del sistema de biblioteca que
expresaremos en Python y SQL. Este modelo incluye las clases principales y sus relaciones: Libro, Usuario y
Prestamo.
Explicación del Diagrama:
1
. 
Clases:
Libro: Representa los libros disponibles en la biblioteca.
Atributos: isbn, titulo, autor.
Métodos: prestar(), devolver().
Usuario: Representa a las personas que utilizan el sistema.
Atributos: idUsuario, nombre, email.
Métodos: registrarse(), consultarHistorial().
Prestamo: Gestiona los préstamos de libros.
Atributos: idPrestamo, fechaInicio, fechaDevolucion, libro, usuario.
Métodos: realizarPrestamo(), finalizarPrestamo().
2
. 
Relaciones:
Libro y Prestamo: Relación de composición (rombo sólido) porque un préstamo está compuesto
por un libro específico. Un libro puede existir sin estar prestado, pero el préstamo depende del
libro.
Usuario y Prestamo: Relación de composición (rombo sólido). Un préstamo está asociado a un
usuario que lo realiza.
3
. 
Cardinalidades:
Un Usuario puede tener múltiples Prestamos (1..*).
Cada Prestamo está relacionado con un único Libro (1..1).
4.4.3. Representación en Python
Documento solo para uso personal. Prohibido copiar o distribuir
18/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
En Python, las clases y relaciones definidas en el modelo conceptual pueden implementarse directamente
mediante programación orientada a objetos. Por ejemplo, para un sistema de biblioteca:
class
 
Libro
:
def
 
__init__
(
self
, titulo, autor, isbn
):
self
.titulo = titulo
self
.autor = autor
self
.isbn = isbn
class
 
Usuario
:
def
 
__init__
(
self
, nombre, email
):
self
.nombre = nombre
self
.email = email
class
 
Prestamo
:
def
 
__init__
(
self
, libro, usuario, fecha_inicio, fecha_devolucion
):
self
.libro = libro
self
.usuario = usuario
self
.fecha_inicio = fecha_inicio
self
.fecha_devolucion = fecha_devolucion
En este ejemplo, las relaciones de composición se reflejan directamente en los atributos de las clases.
4.4.4. Representación en SQL
En SQL, las entidades y relaciones del modelo conceptual pueden implementarse como tablas con claves
primarias y foráneas. Por ejemplo:
CREATE
 
TABLE
 Libro (
isbn 
VARCHAR
(
20
) 
PRIMARY
 KEY,
titulo 
VARCHAR
(
100
),
autor 
VARCHAR
(
50
)
);
CREATE
 
TABLE
 Usuario (
idUsuario 
INT
 
PRIMARY
 KEY,
nombre 
VARCHAR
(
50
),
email 
VARCHAR
(
50
)
);
CREATE
 
TABLE
 Prestamo (
idPrestamo 
INT
 
PRIMARY
 KEY,
isbn 
VARCHAR
(
20
),
idUsuario 
INT
,
fecha_inicio 
DATE
,
fecha_devolucion 
DATE
,
FOREIGN
 KEY (isbn) 
REFERENCES
 Libro(isbn),
FOREIGN
 KEY (idUsuario) 
REFERENCES
 Usuario(idUsuario)
);
Al implementar modelos conceptuales en Python y SQL, se logra un sistema funcional alineado con el diseño,
mejorando la claridad, la trazabilidad y la capacidad de mantenimiento. Esto asegura que las soluciones
técnicas estén directamente vinculadas con los requisitos iniciales.
Bibliografía y lecturas recomendadas:
Documento solo para uso personal. Prohibido copiar o distribuir
19/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Pressman, R. S., & Maxim, B. R. (2015).
Ingeniería del Software: Un Enfoque
Práctico.
 McGraw-Hill.
Sommerville, I. (2011).
 
Ingeniería del Software.
 Pearson.
Mateos García, S. (2015).
 
Análisis y diseño orientado a objetos con UML.
Ediciones Ra-Ma.
Grau, G., & Franch, X. (2008).
 
Requisits: El repte d’analitzar i documentar.
 Editorial
UOC.
PlantUML
: URL: 
https://plantuml.com/
Lucidchart: 
URL: 
https://www.lucidchart.com/
Diagrams.net (Draw.io): 
URL: 
https://www.diagrams.net/
Documento solo para uso personal. Prohibido copiar o distribuir
20/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
Actividades prácticas
Ejercicio 7. Creación y Representación de un Modelo Conceptual para
un Sistema de Gestión de Reservas en un Restaurante
Un restaurante desea implementar un sistema para gestionar las reservas de sus clientes. El sistema debe
permitir:
1
. 
Registrar clientes con su nombre, correo electrónico y número de teléfono.
2
. 
Permitir a los clientes realizar reservas especificando fecha, hora, número de personas y preferencia de
mesa.
3
. 
Gestionar la disponibilidad de las mesas, considerando el número de personas.
4
. 
Asignar un empleado (mesero) a las reservas para atenderlas.
Procesando respuesta, no cierres el navegador, este proceso podría tardar unos segundos
Ejercicio 8. Modelo Conceptual para un Sistema de Gestión de Cursos
Online
Una plataforma de educación en línea necesita un sistema para gestionar cursos, instructores y estudiantes.
El sistema debe permitir:
1
. 
Registrar estudiantes con su nombre, correo y cursos en los que están inscritos.
2
. 
Permitir a los instructores crear cursos especificando el título, descripción y duración.
3
. 
Gestionar la relación entre estudiantes y cursos, incluyendo la fecha de inscripción y el estado (activo o
completado).
Procesando respuesta, no cierres el navegador, este proceso podría tardar unos segundos
1.
Identifica las clases principales, atributos y métodos necesarios para el sistema.
Crea un diagrama UML que represente las clases y sus relaciones (asociación, composición,
herencia).
Explica cómo se implementarían las clases y relaciones en Python.
1.
Identifica las clases principales, atributos y métodos necesarios.
Diseña un diagrama UML que represente el sistema.
Muestra cómo implementarías las clases y relaciones en Python.
Documento solo para uso personal. Prohibido copiar o distribuir
21/21
Diseño Introducción al modelado conceptual
idalumno:906687|unidad:4|codcurso:INF25E06|varp:391|dominioMoodle:N/A|alumnoMoodle:N/A
